Enter main

WARNING:  Please remember to change the settings for low budget problems to avoid getting stuck in an infinite loop. For low budget problems check_duplicate function is not a good idea as there are few feasible candidates in problems for low budget and one cannot avoid duplicates


Inside initialize function

Exiting initialize function

Entering init_net_data function

Exiting init_net_data function

Inside parse function

Reading from data file started

1 2 20

1 5 18

2 3 23

2 6 19

3 4 17

3 7 16

5 6 14

5 9 24

6 10 20

6 7 17

7 11 26

7 8 13

8 12 19

11 12 17

4 8 22

9 10 7

10 11 18

Partial parsing finished

1 6 19.000000 7.000000

5 10 25.000000 12.000000

2 7 30.000000 7.000000

6 11 32.000000 15.000000

3 8 21.000000 11.000000

7 12 28.000000 18.000000

Exiting parse function

Entering generate_rand

Entering encode_ga_cand
1 0 0 1 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Not feasible

Entering encode_ga_cand
1 0 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering encode_ga_cand
1 1 0 0 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 48.000000

Not feasible

Entering encode_ga_cand
1 1 1 1 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 52.000000

Not feasible

Entering encode_ga_cand
1 1 0 0 0 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 37.000000

Not feasible

Entering encode_ga_cand
1 1 0 0 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 1 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Not feasible

Entering encode_ga_cand
1 1 1 0 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 55.000000

Not feasible

Entering encode_ga_cand
1 1 0 1 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Not feasible

Entering encode_ga_cand
1 0 1 1 0 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Not feasible

Entering encode_ga_cand
0 0 0 0 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 11.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 1 1 1 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 70.000000

Not feasible

Entering encode_ga_cand
1 1 1 1 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 70.000000

Not feasible

Entering encode_ga_cand
0 0 1 0 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 1 0 0 1 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 41.000000

Not feasible

Entering encode_ga_cand
1 1 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Not feasible

Entering encode_ga_cand
0 0 1 0 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Not feasible

Entering encode_ga_cand
0 0 0 0 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 1 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 0 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 1 0 1 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Not feasible

Entering encode_ga_cand
1 0 1 0 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 43.000000

Not feasible

Entering encode_ga_cand
0 0 1 0 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Duplicate random candidate generated. Ignoring it and continuing with further attempts.

Entering encode_ga_cand
0 1 0 1 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 38.000000

Not feasible

Entering encode_ga_cand
0 1 0 0 1 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 41.000000

Not feasible

Entering encode_ga_cand
1 0 1 1 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Not feasible

Entering encode_ga_cand
1 1 0 0 0 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 37.000000

Not feasible

Entering encode_ga_cand
1 1 0 1 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Not feasible

Entering encode_ga_cand
1 0 0 0 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 36.000000

Not feasible

Entering encode_ga_cand
0 0 1 1 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Not feasible

Entering encode_ga_cand
0 0 1 0 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Duplicate random candidate generated. Ignoring it and continuing with further attempts.

Entering encode_ga_cand
0 0 0 1 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Not feasible

Entering encode_ga_cand
1 0 0 1 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 51.000000

Not feasible

Entering encode_ga_cand
1 1 0 0 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 48.000000

Not feasible

Entering encode_ga_cand
0 0 1 0 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Not feasible

Entering encode_ga_cand
0 0 1 1 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Not feasible

Entering encode_ga_cand
0 1 1 0 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 30.000000

Not feasible

Entering encode_ga_cand
0 1 0 0 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 23.000000

Not feasible

Entering encode_ga_cand
1 1 0 1 0 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 52.000000

Not feasible

Entering encode_ga_cand
0 0 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Duplicate random candidate generated. Ignoring it and continuing with further attempts.

Entering encode_ga_cand
0 0 1 1 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Not feasible

Entering encode_ga_cand
1 0 0 1 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Not feasible

Entering encode_ga_cand
0 0 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

5 retry attempts have been made to regenerate a random candidate so now we will consider the duplicate itself and proceed forward

Entering encode_ga_cand
0 0 0 1 1 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 44.000000

Not feasible

Entering encode_ga_cand
1 1 1 1 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Not feasible

Entering encode_ga_cand
0 0 0 1 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Not feasible

Entering encode_ga_cand
0 0 1 0 1 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 36.000000

Not feasible

Entering encode_ga_cand
1 1 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Not feasible

Entering encode_ga_cand
1 1 0 1 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 63.000000

Not feasible

Entering encode_ga_cand
1 0 1 1 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Not feasible

Entering encode_ga_cand
1 1 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Not feasible

Entering encode_ga_cand
1 0 0 0 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 0 1 1 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 58.000000

Not feasible

Entering encode_ga_cand
0 1 1 1 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 45.000000

Not feasible

Entering encode_ga_cand
0 0 0 1 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 33.000000

Not feasible

Entering encode_ga_cand
1 1 1 0 0 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 44.000000

Not feasible

Entering encode_ga_cand
0 0 1 0 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Not feasible

Entering encode_ga_cand
0 0 0 1 1 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 44.000000

Not feasible

Entering encode_ga_cand
0 0 1 1 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Not feasible

Entering encode_ga_cand
0 1 1 0 1 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 48.000000

Not feasible

Entering encode_ga_cand
0 1 1 1 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 45.000000

Not feasible

Entering encode_ga_cand
1 1 1 1 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Not feasible

Entering encode_ga_cand
0 0 1 0 1 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 36.000000

Not feasible

Entering encode_ga_cand
1 1 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Not feasible

Entering encode_ga_cand
1 0 1 0 0 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 32.000000

Not feasible

Entering encode_ga_cand
0 0 0 1 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Not feasible

Entering encode_ga_cand
0 0 0 0 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Duplicate random candidate generated. Ignoring it and continuing with further attempts.

Entering encode_ga_cand
1 1 1 1 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 52.000000

Not feasible

Entering encode_ga_cand
1 1 0 0 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 30.000000

Not feasible

Entering encode_ga_cand
1 1 0 1 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 45.000000

Not feasible

Entering encode_ga_cand
0 1 1 1 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 52.000000

Not feasible

Entering encode_ga_cand
1 1 1 0 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 55.000000

Not feasible

Entering encode_ga_cand
0 1 0 1 1 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 56.000000

Not feasible

Entering encode_ga_cand
1 0 1 1 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Not feasible

Entering encode_ga_cand
1 0 1 1 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Not feasible

Entering encode_ga_cand
0 0 1 1 0 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 22.000000

Not feasible

Entering encode_ga_cand
1 0 0 0 0 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Not feasible

Entering encode_ga_cand
0 1 0 0 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 23.000000

Not feasible

Entering encode_ga_cand
1 1 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Not feasible

Entering encode_ga_cand
0 0 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Duplicate random candidate generated. Ignoring it and continuing with further attempts.

Entering encode_ga_cand
1 0 0 0 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Exiting generate_rand

Genetic algorithm: Iteration 1


************************************************
Generation 1
************************************************
Candidate 1: 101000
Candidate 2: 110000
Candidate 3: 000010
Candidate 4: 001010
Candidate 5: 000001
Candidate 6: 011000
Candidate 7: 001000
Candidate 8: 001000
Candidate 9: 100000
Candidate 10: 100010
************************************************

Actual time: 0.000000

Iteration 1: Candidate 1

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1535 (      0 spare) rows
        1541 (      0 spare) structural columns
        3084 (      0 spare) non-zero elements
Global Statistics
           2 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1535 rows         1541 cols         3084 elements
Presolved problem has:
      1510 rows         1517 cols         3034 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        354.030451      D     81     0        .000000     0
   483       2128.494164      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  483 simplex iterations in 0s

Final objective                         : 2.128494163537059e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 6.999998
0.000000	6.799998	6.599998	6.399998	6.199998	5.999998	5.799998	5.599998	5.399997	5.199997	4.999997	4.799997	4.599997	4.399997	4.199997	3.999997	3.799997	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 5.799999
0.000000	5.599999	5.399999	5.199999	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 2.800007
0.000000	2.600007	2.400007	2.200007	2.000007	1.800007	1.600007	1.400007	1.200007	1.000007	0.800007	0.600007	0.400007	0.200007	0.000007	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 2.800007
0.000000	2.600007	2.400007	2.200007	2.000007	1.800007	1.600007	1.400007	1.200007	1.000007	0.800007	0.600007	0.400007	0.200007	0.000007	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 1.999998
0.000000	1.799998	1.599998	1.399998	1.199998	0.999998	0.799998	0.599998	0.399998	0.199998	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 3.800001
0.000000	3.600001	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 2.999997
0.000000	2.799997	2.599997	2.399997	2.199997	1.999997	1.799997	1.599997	1.399997	1.199997	0.999997	0.799997	0.599997	0.399997	0.199997	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 6.200005
0.000000	6.000005	5.800005	5.600005	5.400005	5.200005	5.000005	4.800004	4.600004	4.400004	4.200004	4.000004	3.800004	3.600004	3.400004	3.200004	3.000004	2.800004	2.600004	2.400004	2.200004	2.000004	1.800004	1.600005	1.400005	1.200005	1.000005	0.800005	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 3.399997
0.000000	3.199997	2.999997	2.799997	2.599997	2.399997	2.199997	1.999997	1.799997	1.599997	1.399997	1.199997	0.999997	0.799997	0.599997	0.399997	0.199997	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 6.999998
0.000000	6.799998	6.599998	6.399998	6.199998	5.999998	5.799998	5.599998	5.399997	5.199997	4.999997	4.799997	4.599997	4.399997	4.199997	3.999997	3.799997	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 9.800005
0.000000	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800005	7.600005	7.400005	7.200005	7.000005	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 10.199995
0.000000	9.999995	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799994	6.599994	6.399994	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 2.800007
0.000000	2.600007	2.400007	2.200007	2.000007	1.800007	1.600007	1.400007	1.200007	1.000007	0.800007	0.600007	0.400007	0.200007	0.000007	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 3.800001
0.000000	3.600001	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 6.799998
0.000000	6.599998	6.399998	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399997	4.199997	3.999997	3.799997	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 6] = 7.200004
0.000000	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600003	5.400003	5.200003	5.000003	4.800003	4.600003	4.400003	4.200003	4.000003	3.800003	3.600003	3.400003	3.200003	3.000003	2.800004	2.600004	2.400004	2.200004	2.000004	1.800004	1.600005	1.400005	1.200005	1.000005	0.800005	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 7] = 4.199990
0.000000	3.999990	3.799990	3.599990	3.399990	3.199990	2.999990	2.799990	2.599990	2.399990	2.199990	1.999990	1.799990	1.599990	1.399990	1.199990	0.999990	0.799990	0.599990	0.399990	0.199990	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2128.494164

Entering candidate fitness function

Candidate fitness: 3.958718e+03

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 101000
************************************************
Fitness: 3958.718018
************************************************

Actual time: 2.000000

Iteration 1: Candidate 2

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1535 (      0 spare) rows
        1541 (      0 spare) structural columns
        3084 (      0 spare) non-zero elements
Global Statistics
           2 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1535 rows         1541 cols         3084 elements
Presolved problem has:
      1510 rows         1517 cols         3034 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        359.030451      D     81     0        .000000     0
   481       2142.094833      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  481 simplex iterations in 0s

Final objective                         : 2.142094833195022e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 5.999998
0.000000	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399997	3.199997	2.999997	2.799997	2.599997	2.399997	2.199997	1.999997	1.799998	1.599998	1.399998	1.199998	0.999998	0.799999	0.599999	0.399999	0.199999	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 6.599998
0.000000	6.399998	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 5.999998
0.000000	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399997	3.199997	2.999997	2.799997	2.599997	2.399997	2.199997	1.999997	1.799998	1.599998	1.399998	1.199998	0.999998	0.799999	0.599999	0.399999	0.199999	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 2.399997
0.000000	2.199997	1.999997	1.799997	1.599997	1.399997	1.199997	0.999997	0.799997	0.599997	0.399997	0.199997	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 1.399999
0.000000	1.199999	0.999999	0.799999	0.599999	0.399999	0.199999	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 0.600006
0.000000	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 6.799998
0.000000	6.599998	6.399998	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399997	4.199997	3.999997	3.799997	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 2.800000
0.000000	2.600000	2.400000	2.200000	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 6.399995
0.000000	6.199995	5.999995	5.799995	5.599995	5.399995	5.199995	4.999995	4.799994	4.599994	4.399994	4.199994	3.999994	3.799994	3.599994	3.399994	3.199994	2.999994	2.799994	2.599994	2.399994	2.199994	1.999995	1.799995	1.599995	1.399995	1.199995	0.999995	0.799996	0.599996	0.399996	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 1.399999
0.000000	1.199999	0.999999	0.799999	0.599999	0.399999	0.199999	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 7.200004
0.000000	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600004	5.400004	5.200004	5.000004	4.800004	4.600004	4.400004	4.200004	4.000004	3.800004	3.600004	3.400004	3.200004	3.000004	2.800004	2.600004	2.400005	2.200005	2.000005	1.800005	1.600005	1.400006	1.200006	1.000006	0.800006	0.600006	0.400007	0.200007	0.000007	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 6] = 7.400004
0.000000	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600004	5.400004	5.200004	5.000004	4.800004	4.600004	4.400004	4.200004	4.000004	3.800004	3.600003	3.400004	3.200004	3.000004	2.800004	2.600004	2.400005	2.200005	2.000005	1.800005	1.600005	1.400006	1.200006	1.000006	0.800006	0.600006	0.400007	0.200007	0.000007	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 10] = 5.199999
0.000000	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2142.094833

Entering candidate fitness function

Candidate fitness: 4.044122e+03

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 110000
************************************************
Fitness: 4044.122070
************************************************

Actual time: 2.000000

Iteration 1: Candidate 3

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1454 (      0 spare) rows
        1459 (      0 spare) structural columns
        2919 (      0 spare) non-zero elements
Global Statistics
           1 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1454 rows         1459 cols         2919 elements
Presolved problem has:
      1430 rows         1436 cols         2872 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        711.028902      D    160     0        .000000     0
   545       2466.112435      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  545 simplex iterations in 0s

Final objective                         : 2.466112435164629e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 6.399998
0.000000	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 3.599997
0.000000	3.399997	3.199997	2.999997	2.799997	2.599997	2.399997	2.199997	1.999997	1.799997	1.599997	1.399997	1.199997	0.999997	0.799997	0.599997	0.399997	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 0.400000
0.000000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 5.199999
0.000000	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 4.800005
0.000000	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 2.199998
0.000000	1.999998	1.799998	1.599998	1.399998	1.199998	0.999998	0.799998	0.599998	0.399998	0.199998	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 6.599998
0.000000	6.399998	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 2.800001
0.000000	2.600001	2.400001	2.200001	2.000001	1.800001	1.600001	1.400001	1.200001	1.000001	0.800001	0.600001	0.400001	0.200001	0.000001	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 4.199996
0.000000	3.999996	3.799996	3.599996	3.399996	3.199996	2.999996	2.799996	2.599996	2.399996	2.199996	1.999996	1.799996	1.599996	1.399996	1.199996	0.999996	0.799996	0.599996	0.399996	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 10.199995
0.000000	9.999995	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799994	6.599994	6.399994	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 9.800005
0.000000	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800005	7.600005	7.400005	7.200005	7.000005	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 4.800005
0.000000	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 7.000004
0.000000	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600004	5.400004	5.200004	5.000004	4.800004	4.600003	4.400003	4.200003	4.000003	3.800003	3.600003	3.400003	3.200003	3.000003	2.800004	2.600004	2.400004	2.200004	2.000004	1.800004	1.600005	1.400005	1.200005	1.000005	0.800005	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 8] = 5.999999
0.000000	5.799999	5.599999	5.399999	5.199999	4.999999	4.799999	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2466.112435

Entering candidate fitness function

Candidate fitness: 5.397018e+03

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 000010
************************************************
Fitness: 5397.018066
************************************************

Actual time: 2.000000

Iteration 1: Candidate 4

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1535 (      0 spare) rows
        1541 (      0 spare) structural columns
        3084 (      0 spare) non-zero elements
Global Statistics
           2 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1535 rows         1541 cols         3084 elements
Presolved problem has:
      1509 rows         1516 cols         3032 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        718.030502      D    160     0        .000000     0
   500       2408.263713      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  500 simplex iterations in 0s

Final objective                         : 2.408263713052709e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 5.000000
0.000000	4.800000	4.600000	4.399999	4.200000	4.000000	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 5.199996
0.000000	4.999996	4.799996	4.599995	4.399996	4.199996	3.999995	3.799995	3.599995	3.399995	3.199995	2.999995	2.799995	2.599995	2.399995	2.199995	1.999995	1.799995	1.599995	1.399995	1.199995	0.999995	0.799995	0.599996	0.399996	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 4.800000
0.000000	4.600000	4.400000	4.200000	4.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 0.999999
0.000000	0.799999	0.599999	0.399999	0.199999	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 4.199996
0.000000	3.999996	3.799996	3.599996	3.399996	3.199996	2.999996	2.799996	2.599996	2.399996	2.199996	1.999996	1.799996	1.599996	1.399996	1.199996	0.999996	0.799996	0.599996	0.399996	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 4.000006
0.000000	3.800006	3.600006	3.400006	3.200006	3.000006	2.800006	2.600006	2.400006	2.200006	2.000006	1.800006	1.600006	1.400006	1.200006	1.000006	0.800006	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 5.199996
0.000000	4.999996	4.799996	4.599995	4.399996	4.199996	3.999995	3.799995	3.599995	3.399995	3.199995	2.999995	2.799995	2.599995	2.399995	2.199995	1.999995	1.799995	1.599995	1.399995	1.199995	0.999995	0.799995	0.599996	0.399996	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 10.199995
0.000000	9.999995	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799994	6.599994	6.399994	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 9.800005
0.000000	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800005	7.600005	7.400005	7.200005	7.000005	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 4.800000
0.000000	4.600000	4.400000	4.200000	4.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 5.799999
0.000000	5.599999	5.399999	5.199999	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 7] = 5.000005
0.000000	4.800005	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 8] = 5.000000
0.000000	4.800000	4.600000	4.399999	4.200000	4.000000	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2408.263713

Entering candidate fitness function

Candidate fitness: 5.153566e+03

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 001010
************************************************
Fitness: 5153.566406
************************************************

Actual time: 2.000000

Iteration 1: Candidate 5

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1454 (      0 spare) rows
        1459 (      0 spare) structural columns
        2919 (      0 spare) non-zero elements
Global Statistics
           1 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1454 rows         1459 cols         2919 elements
Presolved problem has:
      1431 rows         1437 cols         2874 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        378.028851      D     81     0        .000000     0
   521       2211.717259      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  521 simplex iterations in 0s

Final objective                         : 2.211717259298875e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 6.399998
0.000000	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 3.599997
0.000000	3.399997	3.199997	2.999997	2.799997	2.599997	2.399997	2.199997	1.999997	1.799997	1.599997	1.399997	1.199997	0.999997	0.799997	0.599997	0.399997	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 1.200005
0.000000	1.000005	0.800005	0.600005	0.400005	0.200005	0.000005	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 5.199993
0.000000	4.999993	4.799993	4.599993	4.399993	4.199993	3.999993	3.799993	3.599993	3.399993	3.199993	2.999993	2.799993	2.599993	2.399993	2.199993	1.999993	1.799993	1.599993	1.399992	1.199993	0.999993	0.799993	0.599993	0.399993	0.199994	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 5.199999
0.000000	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 4.800005
0.000000	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 1.799993
0.000000	1.599993	1.399993	1.199993	0.999993	0.799993	0.599993	0.399992	0.199992	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 7.000004
0.000000	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600004	5.400004	5.200004	5.000004	4.800004	4.600003	4.400003	4.200003	4.000003	3.800003	3.600003	3.400003	3.200003	3.000003	2.800004	2.600004	2.400004	2.200004	2.000004	1.800004	1.600005	1.400005	1.200005	1.000005	0.800005	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 5.000000
0.000000	4.800000	4.600000	4.399999	4.200000	4.000000	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 6.200005
0.000000	6.000005	5.800005	5.600005	5.400005	5.200005	5.000005	4.800004	4.600004	4.400004	4.200004	4.000004	3.800004	3.600004	3.400004	3.200004	3.000004	2.800004	2.600004	2.400004	2.200004	2.000004	1.800004	1.600005	1.400005	1.200005	1.000005	0.800005	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 6.599998
0.000000	6.399998	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 1.200005
0.000000	1.000005	0.800005	0.600005	0.400005	0.200005	0.000005	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 4.800005
0.000000	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 6.599998
0.000000	6.399998	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 12] = 7.199997
0.000000	6.999997	6.799997	6.599997	6.399997	6.199997	5.999997	5.799997	5.599997	5.399997	5.199997	4.999997	4.799997	4.599997	4.399997	4.199997	3.999997	3.799997	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2211.717259

Entering candidate fitness function

Candidate fitness: 4.098042e+03

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 000001
************************************************
Fitness: 4098.041992
************************************************

Actual time: 2.000000

Iteration 1: Candidate 6

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1535 (      0 spare) rows
        1541 (      0 spare) structural columns
        3084 (      0 spare) non-zero elements
Global Statistics
           2 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1535 rows         1541 cols         3084 elements
Presolved problem has:
      1509 rows         1516 cols         3032 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        719.030502      D    160     0        .000000     0
   498       2446.511586      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  498 simplex iterations in 0s

Final objective                         : 2.446511585928946e+03
  Max primal violation      (abs / rel) : 5.960e-07 / 5.960e-07
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 3.599997
0.000000	3.399997	3.199997	2.999997	2.799997	2.599997	2.399997	2.199997	1.999997	1.799997	1.599997	1.399997	1.199997	0.999997	0.799997	0.599997	0.399997	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 0.599999
0.000000	0.399999	0.199999	-0.000001	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 3.599997
0.000000	3.399997	3.199997	2.999997	2.799997	2.599997	2.399997	2.199997	1.999997	1.799997	1.599997	1.399997	1.199997	0.999997	0.799997	0.599997	0.399997	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 3.600007
0.000000	3.400007	3.200007	3.000007	2.800007	2.600007	2.400007	2.200006	2.000006	1.800006	1.600006	1.400006	1.200006	1.000006	0.800006	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 1.199999
0.000000	0.999999	0.799999	0.599999	0.399999	0.199999	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 4.200006
0.000000	4.000006	3.800006	3.600006	3.400006	3.200006	3.000006	2.800006	2.600006	2.400006	2.200006	2.000006	1.800006	1.600006	1.400006	1.200006	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 3.600007
0.000000	3.400007	3.200007	3.000007	2.800007	2.600007	2.400007	2.200006	2.000006	1.800006	1.600006	1.400006	1.200006	1.000006	0.800006	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 6.399998
0.000000	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 3.599997
0.000000	3.399997	3.199997	2.999997	2.799997	2.599997	2.399997	2.199997	1.999997	1.799997	1.599997	1.399997	1.199997	0.999997	0.799997	0.599997	0.399997	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 1.199999
0.000000	0.999999	0.799999	0.599999	0.399999	0.199999	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 6.399998
0.000000	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 10] = 5.199999
0.000000	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 7] = 5.799999
0.000000	5.599999	5.399999	5.199999	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2446.511586

Entering candidate fitness function

Candidate fitness: 5.219005e+03

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 011000
************************************************
Fitness: 5219.005371
************************************************

Actual time: 2.000000

Iteration 1: Candidate 7

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1454 (      0 spare) rows
        1459 (      0 spare) structural columns
        2919 (      0 spare) non-zero elements
Global Statistics
           1 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1454 rows         1459 cols         2919 elements
Presolved problem has:
      1430 rows         1436 cols         2872 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        707.028902      D    160     0        .000000     0
   511       2476.829323      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  511 simplex iterations in 0s

Final objective                         : 2.476829322515794e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 0.599994
0.000000	0.399994	0.199994	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 5.199999
0.000000	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 4.800005
0.000000	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 1.199993
0.000000	0.999993	0.799993	0.599993	0.399993	0.199993	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 4.600000
0.000000	4.400000	4.200000	4.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 4.000003
0.000000	3.800003	3.600003	3.400003	3.200003	3.000003	2.800003	2.600003	2.400002	2.200002	2.000002	1.800002	1.600002	1.400002	1.200002	1.000002	0.800002	0.600002	0.400002	0.200002	0.000002	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 6.399998
0.000000	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 9.999999
0.000000	9.799999	9.599999	9.399999	9.199999	8.999999	8.799999	8.599999	8.399999	8.199999	7.999999	7.799999	7.599998	7.399998	7.199998	6.999998	6.799998	6.599998	6.399998	6.199998	5.999998	5.799999	5.599999	5.399999	5.199999	4.999999	4.799999	4.600000	4.400000	4.200000	4.000000	3.800000	3.600001	3.400001	3.200001	3.000001	2.800001	2.600002	2.400002	2.200002	2.000002	1.800002	1.600002	1.400002	1.200002	1.000003	0.800003	0.600003	0.400003	0.200003	0.000004	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 10.000001
0.000000	9.800001	9.600001	9.400001	9.200001	9.000001	8.800001	8.600001	8.400001	8.200001	8.000001	7.800001	7.600001	7.400001	7.200001	7.000001	6.800001	6.600001	6.400001	6.200001	6.000001	5.800001	5.600001	5.400001	5.200001	5.000002	4.800002	4.600002	4.400002	4.200002	4.000003	3.800003	3.600003	3.400003	3.200003	3.000004	2.800004	2.600004	2.400004	2.200004	2.000005	1.800004	1.600004	1.400005	1.200005	1.000005	0.800005	0.600005	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 4.800005
0.000000	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 5.999999
0.000000	5.799999	5.599999	5.399999	5.199999	4.999999	4.799999	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 7] = 5.800001
0.000000	5.600001	5.400001	5.200001	5.000001	4.800001	4.600001	4.400001	4.200001	4.000001	3.800001	3.600001	3.400001	3.200001	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.800000	1.600001	1.400001	1.200001	1.000001	0.800001	0.600002	0.400002	0.200002	0.000002	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2476.829323

Entering candidate fitness function

Candidate fitness: 5.278602e+03

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 001000
************************************************
Fitness: 5278.602051
************************************************

Actual time: 2.000000

Iteration 1: Candidate 8

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1454 (      0 spare) rows
        1459 (      0 spare) structural columns
        2919 (      0 spare) non-zero elements
Global Statistics
           1 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1454 rows         1459 cols         2919 elements
Presolved problem has:
      1430 rows         1436 cols         2872 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        707.028902      D    160     0        .000000     0
   511       2476.829323      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  511 simplex iterations in 0s

Final objective                         : 2.476829322515794e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 0.599994
0.000000	0.399994	0.199994	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 5.199999
0.000000	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 4.800005
0.000000	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 1.199993
0.000000	0.999993	0.799993	0.599993	0.399993	0.199993	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 4.600000
0.000000	4.400000	4.200000	4.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 4.000003
0.000000	3.800003	3.600003	3.400003	3.200003	3.000003	2.800003	2.600003	2.400002	2.200002	2.000002	1.800002	1.600002	1.400002	1.200002	1.000002	0.800002	0.600002	0.400002	0.200002	0.000002	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 6.399998
0.000000	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 9.999999
0.000000	9.799999	9.599999	9.399999	9.199999	8.999999	8.799999	8.599999	8.399999	8.199999	7.999999	7.799999	7.599998	7.399998	7.199998	6.999998	6.799998	6.599998	6.399998	6.199998	5.999998	5.799999	5.599999	5.399999	5.199999	4.999999	4.799999	4.600000	4.400000	4.200000	4.000000	3.800000	3.600001	3.400001	3.200001	3.000001	2.800001	2.600002	2.400002	2.200002	2.000002	1.800002	1.600002	1.400002	1.200002	1.000003	0.800003	0.600003	0.400003	0.200003	0.000004	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 10.000001
0.000000	9.800001	9.600001	9.400001	9.200001	9.000001	8.800001	8.600001	8.400001	8.200001	8.000001	7.800001	7.600001	7.400001	7.200001	7.000001	6.800001	6.600001	6.400001	6.200001	6.000001	5.800001	5.600001	5.400001	5.200001	5.000002	4.800002	4.600002	4.400002	4.200002	4.000003	3.800003	3.600003	3.400003	3.200003	3.000004	2.800004	2.600004	2.400004	2.200004	2.000005	1.800004	1.600004	1.400005	1.200005	1.000005	0.800005	0.600005	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 4.800005
0.000000	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 5.999999
0.000000	5.799999	5.599999	5.399999	5.199999	4.999999	4.799999	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 7] = 5.800001
0.000000	5.600001	5.400001	5.200001	5.000001	4.800001	4.600001	4.400001	4.200001	4.000001	3.800001	3.600001	3.400001	3.200001	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.800000	1.600001	1.400001	1.200001	1.000001	0.800001	0.600002	0.400002	0.200002	0.000002	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2476.829323

Entering candidate fitness function

Candidate fitness: 5.278602e+03

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 001000
************************************************
Fitness: 5278.602051
************************************************

Actual time: 2.000000

Iteration 1: Candidate 9

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1454 (      0 spare) rows
        1459 (      0 spare) structural columns
        2919 (      0 spare) non-zero elements
Global Statistics
           1 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1454 rows         1459 cols         2919 elements
Presolved problem has:
      1431 rows         1437 cols         2874 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        347.028851      D     81     0        .000000     0
   488       2166.540561      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  488 simplex iterations in 0s

Final objective                         : 2.166540560541779e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 6.000002
0.000000	5.800002	5.600002	5.400002	5.200002	5.000002	4.800002	4.600002	4.400002	4.200002	4.000002	3.800002	3.600002	3.400002	3.200002	3.000002	2.800002	2.600002	2.400002	2.200001	2.000002	1.800002	1.600002	1.400002	1.200002	1.000003	0.800003	0.600003	0.400003	0.200003	0.000004	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 6.400001
0.000000	6.200001	6.000001	5.800001	5.600001	5.400001	5.200001	5.000001	4.800001	4.600001	4.400001	4.200001	4.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200001	2.000001	1.800001	1.600001	1.400001	1.200001	1.000002	0.800002	0.600002	0.400002	0.200002	0.000003	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 6.000002
0.000000	5.800002	5.600002	5.400002	5.200002	5.000002	4.800002	4.600002	4.400002	4.200002	4.000002	3.800002	3.600002	3.400002	3.200002	3.000002	2.800002	2.600002	2.400002	2.200001	2.000002	1.800002	1.600002	1.400002	1.200002	1.000003	0.800003	0.600003	0.400003	0.200003	0.000004	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 2.400002
0.000000	2.200002	2.000002	1.800002	1.600002	1.400002	1.200001	1.000001	0.800001	0.600001	0.400001	0.200001	0.000001	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 2.400000
0.000000	2.200000	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 4.000000
0.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 3.200000
0.000000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.399999	0.199999	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 6.799998
0.000000	6.599998	6.399998	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399997	4.199997	3.999997	3.799997	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 2.800005
0.000000	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800004	0.600004	0.400004	0.200004	0.000004	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 6.399995
0.000000	6.199995	5.999995	5.799995	5.599995	5.399995	5.199995	4.999995	4.799994	4.599994	4.399994	4.199994	3.999994	3.799994	3.599994	3.399994	3.199994	2.999994	2.799994	2.599994	2.399994	2.199994	1.999995	1.799995	1.599995	1.399995	1.199995	0.999995	0.799996	0.599996	0.399996	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 4.000000
0.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 7.200000
0.000000	7.000000	6.800000	6.600000	6.400000	6.200000	6.000000	5.800000	5.600000	5.400000	5.200000	5.000000	4.800000	4.600000	4.400000	4.200000	4.000000	3.799999	3.599999	3.399999	3.200000	3.000000	2.800000	2.600000	2.400000	2.200001	2.000001	1.800001	1.600001	1.400001	1.200001	1.000002	0.800002	0.600002	0.400002	0.200002	0.000003	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 6] = 7.599997
0.000000	7.399997	7.199997	6.999997	6.799997	6.599997	6.399997	6.199997	5.999997	5.799997	5.599997	5.399997	5.199997	4.999997	4.799997	4.599997	4.399997	4.199996	3.999996	3.799996	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2166.540561

Entering candidate fitness function

Candidate fitness: 4.080758e+03

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 100000
************************************************
Fitness: 4080.758057
************************************************

Actual time: 2.000000

Iteration 1: Candidate 10

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1535 (      0 spare) rows
        1541 (      0 spare) structural columns
        3084 (      0 spare) non-zero elements
Global Statistics
           2 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1535 rows         1541 cols         3084 elements
Presolved problem has:
      1510 rows         1517 cols         3034 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        358.030451      D     81     0        .000000     0
   485       2087.827608      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  485 simplex iterations in 0s

Final objective                         : 2.087827608114467e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 6.000005
0.000000	5.800005	5.600005	5.400005	5.200005	5.000005	4.800005	4.600005	4.400005	4.200005	4.000005	3.800004	3.600004	3.400004	3.200004	3.000004	2.800004	2.600004	2.400004	2.200004	2.000004	1.800004	1.600005	1.400005	1.200005	1.000005	0.800005	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 6.399998
0.000000	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 6.000005
0.000000	5.800005	5.600005	5.400005	5.200005	5.000005	4.800005	4.600005	4.400005	4.200005	4.000005	3.800004	3.600004	3.400004	3.200004	3.000004	2.800004	2.600004	2.400004	2.200004	2.000004	1.800004	1.600005	1.400005	1.200005	1.000005	0.800005	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 0.000006
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 2.399998
0.000000	2.199998	1.999998	1.799998	1.599998	1.399998	1.199998	0.999998	0.799998	0.599998	0.399997	0.199997	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 4.000000
0.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 3.199997
0.000000	2.999997	2.799997	2.599997	2.399997	2.199997	1.999997	1.799997	1.599997	1.399997	1.199997	0.999997	0.799997	0.599997	0.399997	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 6.799998
0.000000	6.599998	6.399998	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399997	4.199997	3.999997	3.799997	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 2.600008
0.000000	2.400008	2.200008	2.000008	1.800008	1.600008	1.400007	1.200007	1.000007	0.800007	0.600007	0.400007	0.200007	0.000007	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 4.199996
0.000000	3.999996	3.799996	3.599996	3.399996	3.199996	2.999996	2.799996	2.599996	2.399996	2.199996	1.999996	1.799996	1.599996	1.399996	1.199996	0.999996	0.799996	0.599996	0.399996	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 10.199995
0.000000	9.999995	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799994	6.599994	6.399994	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 9.800005
0.000000	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800005	7.600005	7.400005	7.200005	7.000005	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 4.000000
0.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 7.199997
0.000000	6.999997	6.799997	6.599997	6.399997	6.199997	5.999997	5.799997	5.599997	5.399997	5.199997	4.999997	4.799997	4.599997	4.399997	4.199997	3.999997	3.799997	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 6] = 7.599997
0.000000	7.399997	7.199997	6.999997	6.799997	6.599997	6.399997	6.199997	5.999997	5.799997	5.599997	5.399997	5.199997	4.999997	4.799997	4.599997	4.399997	4.199996	3.999996	3.799996	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 8] = 5.999999
0.000000	5.799999	5.599999	5.399999	5.199999	4.999999	4.799999	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2087.827608

Entering candidate fitness function

Candidate fitness: 3.976985e+03

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 100010
************************************************
Fitness: 3976.985352
************************************************

Actual time: 2.000000

Actual time: 2.000000


************************************************
Generation 1(Before sorting)
************************************************
Candidate 1:  101000	Fitness value: 3.958718e+03
Candidate 2:  110000	Fitness value: 4.044122e+03
Candidate 3:  000010	Fitness value: 5.397018e+03
Candidate 4:  001010	Fitness value: 5.153566e+03
Candidate 5:  000001	Fitness value: 4.098042e+03
Candidate 6:  011000	Fitness value: 5.219005e+03
Candidate 7:  001000	Fitness value: 5.278602e+03
Candidate 8:  001000	Fitness value: 5.278602e+03
Candidate 9:  100000	Fitness value: 4.080758e+03
Candidate 10:  100010	Fitness value: 3.976985e+03
************************************************


************************************************
Generation 1(After sorting)
************************************************
Candidate 1:  101000	Fitness value: 3.958718e+03
Candidate 2:  100010	Fitness value: 3.976985e+03
Candidate 3:  110000	Fitness value: 4.044122e+03
Candidate 4:  100000	Fitness value: 4.080758e+03
Candidate 5:  000001	Fitness value: 4.098042e+03
Candidate 6:  001010	Fitness value: 5.153566e+03
Candidate 7:  011000	Fitness value: 5.219005e+03
Candidate 8:  001000	Fitness value: 5.278602e+03
Candidate 9:  001000	Fitness value: 5.278602e+03
Candidate 10:  000010	Fitness value: 5.397018e+03
************************************************

Entering crossover function

3	2	

Crossover point is 3

Second crossover point is 2
2	9	

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

1	6	

Crossover point is 1

Second crossover point is 6

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

5	5	6	

Crossover point is 5

Second crossover point is 6
6	8	

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

5	5	6	

Crossover point is 5

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

1	1	3	

Crossover point is 1

Second crossover point is 3

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 30.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

6	4	

Crossover point is 6

Second crossover point is 4
9	4	

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 11.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

5	6	

Crossover point is 5

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 29.000000

Child from crossover not feasible


5	2	

Crossover point is 5

Second crossover point is 2


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 11.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

5	5	5	6	

Crossover point is 5

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 29.000000

Child from crossover not feasible


2	6	

Crossover point is 2

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

2	1	

Crossover point is 2

Second crossover point is 1
0	8	

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 22.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 15.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 22.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

5	5	3	

Crossover point is 5

Second crossover point is 3
6	4	

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


2	4	

Crossover point is 2

Second crossover point is 4

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 23.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

4	3	

Crossover point is 4

Second crossover point is 3

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


6	6	2	

Crossover point is 6

Second crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 30.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

5	5	2	

Crossover point is 5

Second crossover point is 2
7	5	

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 36.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible

4	3	

Crossover point is 4

Second crossover point is 3

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible

3	2	

Crossover point is 3

Second crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 22.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

4	2	

Crossover point is 4

Second crossover point is 2
4	8	

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 11.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

2	3	

Crossover point is 2

Second crossover point is 3

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 15.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts

5	1	

Crossover point is 5

Second crossover point is 1

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


2	3	

Crossover point is 2

Second crossover point is 3

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

6	6	5	

Crossover point is 6

Second crossover point is 5
4	5	

1	3	

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

3	3	6	

Crossover point is 3

Second crossover point is 6

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

2	2	2	6	

Crossover point is 2

Second crossover point is 6

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

5	5	3	

Crossover point is 5

Second crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

6	5	

Crossover point is 6

Second crossover point is 5
7	2	

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

1	4	

Crossover point is 1

Second crossover point is 4

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 30.000000

Child from crossover not feasible


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible

3	4	

Crossover point is 3

Second crossover point is 4

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

4	6	

Crossover point is 4

Second crossover point is 6
7	1	

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

5	5	6	

Crossover point is 5

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

1	2	

Crossover point is 1

Second crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 15.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

Exiting crossover function

Entering mutation routine

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Mutation successfully done for candidate 1 in the pool of children

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 27.000000

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 36.000000

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 33.000000

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 36.000000

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 44.000000

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Exiting mutation routine

Finished creating the next generation

Genetic algorithm: Iteration 2


************************************************
Generation 2
************************************************
Candidate 1: 101000
Candidate 2: 011000
Candidate 3: 011000
Candidate 4: 000001
Candidate 5: 000100
Candidate 6: 000001
Candidate 7: 001010
Candidate 8: 000001
Candidate 9: 100010
Candidate 10: 110000
************************************************

Actual time: 2.000000

Iteration 2: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 101000
************************************************

Match:
************************************************
Candidate: 101000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 011000
************************************************

Match:
************************************************
Candidate: 011000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 011000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 3

Entering cache lookup

Pattern:
************************************************
Candidate: 011000
************************************************

Match:
************************************************
Candidate: 011000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 011000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 4

Entering cache lookup

Pattern:
************************************************
Candidate: 000001
************************************************

Match:
************************************************
Candidate: 000001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 000001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 5

Entering cache lookup

Exiting cache lookup

Cache miss. Will have to solve the TAP for this candidate

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1454 (      0 spare) rows
        1459 (      0 spare) structural columns
        2919 (      0 spare) non-zero elements
Global Statistics
           1 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1454 rows         1459 cols         2919 elements
Presolved problem has:
      1430 rows         1436 cols         2872 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        715.028902      D    160     0        .000000     0
   496       2467.819010      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  496 simplex iterations in 0s

Final objective                         : 2.467819010034702e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 5.199996
0.000000	4.999996	4.799996	4.599995	4.399996	4.199996	3.999995	3.799995	3.599995	3.399995	3.199995	2.999995	2.799995	2.599995	2.399995	2.199995	1.999995	1.799995	1.599995	1.399995	1.199995	0.999995	0.799995	0.599996	0.399996	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 4.800000
0.000000	4.600000	4.400000	4.200000	4.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 1.599995
0.000000	1.399995	1.199995	0.999995	0.799995	0.599995	0.399995	0.199995	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 5.400005
0.000000	5.200005	5.000005	4.800005	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800004	2.600004	2.400004	2.200004	2.000004	1.800004	1.600004	1.400004	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 4.600000
0.000000	4.400000	4.200000	4.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 4.600009
0.000000	4.400009	4.200009	4.000009	3.800009	3.600009	3.400009	3.200009	3.000009	2.800009	2.600009	2.400009	2.200009	2.000009	1.800009	1.600009	1.400009	1.200009	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 6.200004
0.000000	6.000004	5.800004	5.600004	5.400004	5.200004	5.000004	4.800004	4.600004	4.400004	4.200004	4.000004	3.800004	3.600004	3.400004	3.200004	3.000004	2.800004	2.600004	2.400004	2.200004	2.000004	1.800004	1.600004	1.400005	1.200005	1.000005	0.800005	0.600005	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 9.800005
0.000000	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800005	7.600005	7.400005	7.200005	7.000005	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 10.199995
0.000000	9.999995	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799994	6.599994	6.399994	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 4.600000
0.000000	4.400000	4.200000	4.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 4.600000
0.000000	4.400000	4.200000	4.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 11] = 5.599995
0.000000	5.399995	5.199995	4.999995	4.799995	4.599995	4.399995	4.199995	3.999995	3.799995	3.599995	3.399995	3.199995	2.999995	2.799995	2.599995	2.399995	2.199995	1.999995	1.799994	1.599995	1.399995	1.199995	0.999995	0.799995	0.599996	0.399996	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2467.819010

Entering candidate fitness function

Candidate fitness: 5.242351e+03

Exiting candidate fitness function


************************************************
Iteration 2 results:
************************************************
Candidate: 000100
************************************************
Fitness: 5242.350586
************************************************

Actual time: 2.000000

Iteration 2: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 000001
************************************************

Match:
************************************************
Candidate: 000001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 000001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 001010
************************************************

Match:
************************************************
Candidate: 001010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 001010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 000001
************************************************

Match:
************************************************
Candidate: 000001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 000001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 100010
************************************************

Match:
************************************************
Candidate: 100010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 110000
************************************************

Match:
************************************************
Candidate: 110000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 110000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Actual time: 2.000000


************************************************
Generation 2(Before sorting)
************************************************
Candidate 1:  101000	Fitness value: 3.958718e+03
Candidate 2:  011000	Fitness value: 5.219005e+03
Candidate 3:  011000	Fitness value: 5.219005e+03
Candidate 4:  000001	Fitness value: 4.098042e+03
Candidate 5:  000100	Fitness value: 5.242351e+03
Candidate 6:  000001	Fitness value: 4.098042e+03
Candidate 7:  001010	Fitness value: 5.153566e+03
Candidate 8:  000001	Fitness value: 4.098042e+03
Candidate 9:  100010	Fitness value: 3.976985e+03
Candidate 10:  110000	Fitness value: 4.044122e+03
************************************************


************************************************
Generation 2(After sorting)
************************************************
Candidate 1:  101000	Fitness value: 3.958718e+03
Candidate 2:  100010	Fitness value: 3.976985e+03
Candidate 3:  110000	Fitness value: 4.044122e+03
Candidate 4:  000001	Fitness value: 4.098042e+03
Candidate 5:  000001	Fitness value: 4.098042e+03
Candidate 6:  000001	Fitness value: 4.098042e+03
Candidate 7:  001010	Fitness value: 5.153566e+03
Candidate 8:  011000	Fitness value: 5.219005e+03
Candidate 9:  011000	Fitness value: 5.219005e+03
Candidate 10:  000100	Fitness value: 5.242351e+03
************************************************

Entering crossover function

4	4	4	3	

Crossover point is 4

Second crossover point is 3
9	8	

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 11.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

6	4	

Crossover point is 6

Second crossover point is 4
3	3	

5	2	

Crossover point is 5

Second crossover point is 2
0	5	

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

2	1	

Crossover point is 2

Second crossover point is 1
9	8	

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 23.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 22.000000

Child from crossover not feasible

3	4	

Crossover point is 3

Second crossover point is 4

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 11.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Child from crossover not feasible

4	1	

Crossover point is 4

Second crossover point is 1

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 44.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

2	5	

Crossover point is 2

Second crossover point is 5
7	4	

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 30.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts

1	6	

Crossover point is 1

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

6	5	

Crossover point is 6

Second crossover point is 5

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 37.000000

Child from crossover not feasible


3	3	4	

Crossover point is 3

Second crossover point is 4

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

1	3	

Crossover point is 1

Second crossover point is 3
9	3	

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


5	5	4	

Crossover point is 5

Second crossover point is 4

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 15.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


6	2	

Crossover point is 6

Second crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 15.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

1	1	3	

Crossover point is 1

Second crossover point is 3

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


1	6	

Crossover point is 1

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

4	4	6	

Crossover point is 4

Second crossover point is 6
3	8	

6	0	

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible

2	4	

Crossover point is 2

Second crossover point is 4

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible

6	2	

Crossover point is 6

Second crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible

2	3	

Crossover point is 2

Second crossover point is 3

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

6	5	

Crossover point is 6

Second crossover point is 5
6	3	

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 36.000000

Child from crossover not feasible


5	6	

Crossover point is 5

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 36.000000

Child from crossover not feasible


2	3	

Crossover point is 2

Second crossover point is 3

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 33.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts

4	1	

Crossover point is 4

Second crossover point is 1

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

5	1	

Crossover point is 5

Second crossover point is 1
2	7	

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 44.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 30.000000

Child from crossover not feasible

6	6	3	

Crossover point is 6

Second crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

4	6	

Crossover point is 4

Second crossover point is 6

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

3	3	6	

Crossover point is 3

Second crossover point is 6
6	0	

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible

5	6	

Crossover point is 5

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

3	2	

Crossover point is 3

Second crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Child from crossover not feasible


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

2	6	

Crossover point is 2

Second crossover point is 6
1	5	

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 11.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts

4	2	

Crossover point is 4

Second crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Exiting crossover function

Entering mutation routine

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Mutation successfully done for candidate 1 in the pool of children

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 15.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 37.000000

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 52.000000

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 32.000000

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 33.000000

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 37.000000

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

Exiting mutation routine

Finished creating the next generation

Genetic algorithm: Iteration 3


************************************************
Generation 3
************************************************
Candidate 1: 101000
Candidate 2: 001010
Candidate 3: 001000
Candidate 4: 011000
Candidate 5: 000001
Candidate 6: 000001
Candidate 7: 101000
Candidate 8: 000001
Candidate 9: 110000
Candidate 10: 101000
************************************************

Actual time: 2.000000

Iteration 3: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 101000
************************************************

Match:
************************************************
Candidate: 101000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 001010
************************************************

Match:
************************************************
Candidate: 001010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 001010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 3

Entering cache lookup

Exiting cache lookup

Cache miss. Will have to solve the TAP for this candidate

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1454 (      0 spare) rows
        1459 (      0 spare) structural columns
        2919 (      0 spare) non-zero elements
Global Statistics
           1 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1454 rows         1459 cols         2919 elements
Presolved problem has:
      1430 rows         1436 cols         2872 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        707.028902      D    160     0        .000000     0
   511       2476.829323      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  511 simplex iterations in 0s

Final objective                         : 2.476829322515794e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 0.599994
0.000000	0.399994	0.199994	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 5.199999
0.000000	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 4.800005
0.000000	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 1.199993
0.000000	0.999993	0.799993	0.599993	0.399993	0.199993	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 4.600000
0.000000	4.400000	4.200000	4.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 4.000003
0.000000	3.800003	3.600003	3.400003	3.200003	3.000003	2.800003	2.600003	2.400002	2.200002	2.000002	1.800002	1.600002	1.400002	1.200002	1.000002	0.800002	0.600002	0.400002	0.200002	0.000002	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 6.399998
0.000000	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 9.999999
0.000000	9.799999	9.599999	9.399999	9.199999	8.999999	8.799999	8.599999	8.399999	8.199999	7.999999	7.799999	7.599998	7.399998	7.199998	6.999998	6.799998	6.599998	6.399998	6.199998	5.999998	5.799999	5.599999	5.399999	5.199999	4.999999	4.799999	4.600000	4.400000	4.200000	4.000000	3.800000	3.600001	3.400001	3.200001	3.000001	2.800001	2.600002	2.400002	2.200002	2.000002	1.800002	1.600002	1.400002	1.200002	1.000003	0.800003	0.600003	0.400003	0.200003	0.000004	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 10.000001
0.000000	9.800001	9.600001	9.400001	9.200001	9.000001	8.800001	8.600001	8.400001	8.200001	8.000001	7.800001	7.600001	7.400001	7.200001	7.000001	6.800001	6.600001	6.400001	6.200001	6.000001	5.800001	5.600001	5.400001	5.200001	5.000002	4.800002	4.600002	4.400002	4.200002	4.000003	3.800003	3.600003	3.400003	3.200003	3.000004	2.800004	2.600004	2.400004	2.200004	2.000005	1.800004	1.600004	1.400005	1.200005	1.000005	0.800005	0.600005	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 4.800005
0.000000	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 5.999999
0.000000	5.799999	5.599999	5.399999	5.199999	4.999999	4.799999	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 7] = 5.800001
0.000000	5.600001	5.400001	5.200001	5.000001	4.800001	4.600001	4.400001	4.200001	4.000001	3.800001	3.600001	3.400001	3.200001	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.800000	1.600001	1.400001	1.200001	1.000001	0.800001	0.600002	0.400002	0.200002	0.000002	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2476.829323

Entering candidate fitness function

Candidate fitness: 5.278602e+03

Exiting candidate fitness function


************************************************
Iteration 3 results:
************************************************
Candidate: 001000
************************************************
Fitness: 5278.602051
************************************************

Actual time: 2.000000

Iteration 3: Candidate 4

Entering cache lookup

Pattern:
************************************************
Candidate: 011000
************************************************

Match:
************************************************
Candidate: 011000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 011000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 5

Entering cache lookup

Pattern:
************************************************
Candidate: 000001
************************************************

Match:
************************************************
Candidate: 000001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 000001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 000001
************************************************

Match:
************************************************
Candidate: 000001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 000001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 101000
************************************************

Match:
************************************************
Candidate: 101000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 000001
************************************************

Match:
************************************************
Candidate: 000001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 000001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 110000
************************************************

Match:
************************************************
Candidate: 110000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 110000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 101000
************************************************

Match:
************************************************
Candidate: 101000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Actual time: 2.000000


************************************************
Generation 3(Before sorting)
************************************************
Candidate 1:  101000	Fitness value: 3.958718e+03
Candidate 2:  001010	Fitness value: 5.153566e+03
Candidate 3:  001000	Fitness value: 5.278602e+03
Candidate 4:  011000	Fitness value: 5.219005e+03
Candidate 5:  000001	Fitness value: 4.098042e+03
Candidate 6:  000001	Fitness value: 4.098042e+03
Candidate 7:  101000	Fitness value: 3.958718e+03
Candidate 8:  000001	Fitness value: 4.098042e+03
Candidate 9:  110000	Fitness value: 4.044122e+03
Candidate 10:  101000	Fitness value: 3.958718e+03
************************************************


************************************************
Generation 3(After sorting)
************************************************
Candidate 1:  101000	Fitness value: 3.958718e+03
Candidate 2:  101000	Fitness value: 3.958718e+03
Candidate 3:  101000	Fitness value: 3.958718e+03
Candidate 4:  110000	Fitness value: 4.044122e+03
Candidate 5:  000001	Fitness value: 4.098042e+03
Candidate 6:  000001	Fitness value: 4.098042e+03
Candidate 7:  000001	Fitness value: 4.098042e+03
Candidate 8:  001010	Fitness value: 5.153566e+03
Candidate 9:  011000	Fitness value: 5.219005e+03
Candidate 10:  001000	Fitness value: 5.278602e+03
************************************************

Entering crossover function

4	4	4	3	

Crossover point is 4

Second crossover point is 3
9	8	

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

4	6	

Crossover point is 4

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

4	2	

Crossover point is 4

Second crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 30.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

5	2	

Crossover point is 5

Second crossover point is 2
0	5	

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

3	2	

Crossover point is 3

Second crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 22.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

1	6	

Crossover point is 1

Second crossover point is 6

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

3	4	

Crossover point is 3

Second crossover point is 4
6	0	

7	3	

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

5	5	3	

Crossover point is 5

Second crossover point is 3

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 30.000000

Child from crossover not feasible

1	6	

Crossover point is 1

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

3	3	4	

Crossover point is 3

Second crossover point is 4
3	0	

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

3	6	

Crossover point is 3

Second crossover point is 6

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

2	5	

Crossover point is 2

Second crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Child from crossover not feasible


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

4	6	

Crossover point is 4

Second crossover point is 6
3	0	

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

1	3	

Crossover point is 1

Second crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Child from crossover not feasible


Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 30.000000

Child from crossover not feasible

1	6	

Crossover point is 1

Second crossover point is 6

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

4	4	6	

Crossover point is 4

Second crossover point is 6
3	8	

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

4	1	

Crossover point is 4

Second crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 37.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 41.000000

Child from crossover not feasible

2	4	

Crossover point is 2

Second crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 23.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

2	3	

Crossover point is 2

Second crossover point is 3
6	8	

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 27.000000

Child from crossover not feasible

5	4	

Crossover point is 5

Second crossover point is 4


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

3	5	

Crossover point is 3

Second crossover point is 5


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

6	2	

Crossover point is 6

Second crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 30.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

4	1	

Crossover point is 4

Second crossover point is 1
7	6	

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

1	2	

Crossover point is 1

Second crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 33.000000

Child from crossover not feasible


5	6	

Crossover point is 5

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 36.000000

Child from crossover not feasible


6	3	

Crossover point is 6

Second crossover point is 3

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 11.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

6	5	

Crossover point is 6

Second crossover point is 5
3	4	

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 37.000000

Child from crossover not feasible


6	4	

Crossover point is 6

Second crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 37.000000

Child from crossover not feasible


1	5	

Crossover point is 1

Second crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts

6	3	

Crossover point is 6

Second crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 37.000000

Child from crossover not feasible


2	4	

Crossover point is 2

Second crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

6	2	

Crossover point is 6

Second crossover point is 2
5	5	

2	5	

Crossover point is 2

Second crossover point is 5
0	7	

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 43.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible

5	5	3	

Crossover point is 5

Second crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

6	1	

Crossover point is 6

Second crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

Exiting crossover function

Entering mutation routine

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Mutation successfully done for candidate 1 in the pool of children

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 22.000000

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 30.000000

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 37.000000

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 33.000000

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 29.000000

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 44.000000

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Exiting mutation routine

Finished creating the next generation

Genetic algorithm: Iteration 4


************************************************
Generation 4
************************************************
Candidate 1: 101000
Candidate 2: 010000
Candidate 3: 101000
Candidate 4: 010000
Candidate 5: 101000
Candidate 6: 101000
Candidate 7: 110000
Candidate 8: 000001
Candidate 9: 000010
Candidate 10: 110000
************************************************

Actual time: 2.000000

Iteration 4: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 101000
************************************************

Match:
************************************************
Candidate: 101000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 2

Entering cache lookup

Exiting cache lookup

Cache miss. Will have to solve the TAP for this candidate

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1454 (      0 spare) rows
        1459 (      0 spare) structural columns
        2919 (      0 spare) non-zero elements
Global Statistics
           1 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1454 rows         1459 cols         2919 elements
Presolved problem has:
      1430 rows         1436 cols         2872 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        712.028902      D    160     0        .000000     0
   523       2510.437186      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  523 simplex iterations in 0s

Final objective                         : 2.510437185538092e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 9.800005
0.000000	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800005	7.600005	7.400005	7.200005	7.000005	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 10.199995
0.000000	9.999995	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799994	6.599994	6.399994	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 6.199998
0.000000	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 3.600007
0.000000	3.400007	3.200007	3.000007	2.800007	2.600007	2.400007	2.200006	2.000006	1.800006	1.600006	1.400006	1.200006	1.000006	0.800006	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 2.599998
0.000000	2.399998	2.199998	1.999998	1.799998	1.599998	1.399998	1.199998	0.999998	0.799998	0.599998	0.399997	0.199997	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 2.799998
0.000000	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399998	1.199998	0.999998	0.799998	0.599998	0.399997	0.199997	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 2.199998
0.000000	1.999998	1.799998	1.599998	1.399998	1.199998	0.999998	0.799998	0.599998	0.399998	0.199998	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 6.400004
0.000000	6.200004	6.000004	5.800004	5.600004	5.400004	5.200004	5.000004	4.800004	4.600004	4.400004	4.200004	4.000004	3.800004	3.600004	3.400004	3.200004	3.000004	2.800004	2.600004	2.400004	2.200004	2.000004	1.800004	1.600005	1.400005	1.200005	1.000005	0.800005	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 2.600008
0.000000	2.400008	2.200008	2.000008	1.800008	1.600008	1.400007	1.200007	1.000007	0.800007	0.600007	0.400007	0.200007	0.000007	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 6.399995
0.000000	6.199995	5.999995	5.799995	5.599995	5.399995	5.199995	4.999995	4.799994	4.599994	4.399994	4.199994	3.999994	3.799994	3.599994	3.399994	3.199994	2.999994	2.799994	2.599994	2.399994	2.199994	1.999995	1.799995	1.599995	1.399995	1.199995	0.999995	0.799996	0.599996	0.399996	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 2.199998
0.000000	1.999998	1.799998	1.599998	1.399998	1.199998	0.999998	0.799998	0.599998	0.399998	0.199998	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 7.399997
0.000000	7.199997	6.999997	6.799997	6.599997	6.399997	6.199997	5.999997	5.799997	5.599997	5.399997	5.199997	4.999997	4.799997	4.599997	4.399997	4.199997	3.999997	3.799997	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 10] = 5.199999
0.000000	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2510.437186

Entering candidate fitness function

Candidate fitness: 5.440842e+03

Exiting candidate fitness function


************************************************
Iteration 4 results:
************************************************
Candidate: 010000
************************************************
Fitness: 5440.841797
************************************************

Actual time: 2.000000

Iteration 4: Candidate 3

Entering cache lookup

Pattern:
************************************************
Candidate: 101000
************************************************

Match:
************************************************
Candidate: 101000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 4

Entering cache lookup

Exiting cache lookup

Cache miss. Will have to solve the TAP for this candidate

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1454 (      0 spare) rows
        1459 (      0 spare) structural columns
        2919 (      0 spare) non-zero elements
Global Statistics
           1 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1454 rows         1459 cols         2919 elements
Presolved problem has:
      1430 rows         1436 cols         2872 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        712.028902      D    160     0        .000000     0
   523       2510.437186      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  523 simplex iterations in 0s

Final objective                         : 2.510437185538092e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 9.800005
0.000000	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800005	7.600005	7.400005	7.200005	7.000005	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 10.199995
0.000000	9.999995	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799994	6.599994	6.399994	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 6.199998
0.000000	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 3.600007
0.000000	3.400007	3.200007	3.000007	2.800007	2.600007	2.400007	2.200006	2.000006	1.800006	1.600006	1.400006	1.200006	1.000006	0.800006	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 2.599998
0.000000	2.399998	2.199998	1.999998	1.799998	1.599998	1.399998	1.199998	0.999998	0.799998	0.599998	0.399997	0.199997	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 2.799998
0.000000	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399998	1.199998	0.999998	0.799998	0.599998	0.399997	0.199997	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 2.199998
0.000000	1.999998	1.799998	1.599998	1.399998	1.199998	0.999998	0.799998	0.599998	0.399998	0.199998	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 6.400004
0.000000	6.200004	6.000004	5.800004	5.600004	5.400004	5.200004	5.000004	4.800004	4.600004	4.400004	4.200004	4.000004	3.800004	3.600004	3.400004	3.200004	3.000004	2.800004	2.600004	2.400004	2.200004	2.000004	1.800004	1.600005	1.400005	1.200005	1.000005	0.800005	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 2.600008
0.000000	2.400008	2.200008	2.000008	1.800008	1.600008	1.400007	1.200007	1.000007	0.800007	0.600007	0.400007	0.200007	0.000007	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 6.399995
0.000000	6.199995	5.999995	5.799995	5.599995	5.399995	5.199995	4.999995	4.799994	4.599994	4.399994	4.199994	3.999994	3.799994	3.599994	3.399994	3.199994	2.999994	2.799994	2.599994	2.399994	2.199994	1.999995	1.799995	1.599995	1.399995	1.199995	0.999995	0.799996	0.599996	0.399996	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 2.199998
0.000000	1.999998	1.799998	1.599998	1.399998	1.199998	0.999998	0.799998	0.599998	0.399998	0.199998	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 7.399997
0.000000	7.199997	6.999997	6.799997	6.599997	6.399997	6.199997	5.999997	5.799997	5.599997	5.399997	5.199997	4.999997	4.799997	4.599997	4.399997	4.199997	3.999997	3.799997	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 10] = 5.199999
0.000000	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2510.437186

Entering candidate fitness function

Candidate fitness: 5.440842e+03

Exiting candidate fitness function


************************************************
Iteration 4 results:
************************************************
Candidate: 010000
************************************************
Fitness: 5440.841797
************************************************

Actual time: 2.000000

Iteration 4: Candidate 5

Entering cache lookup

Pattern:
************************************************
Candidate: 101000
************************************************

Match:
************************************************
Candidate: 101000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 101000
************************************************

Match:
************************************************
Candidate: 101000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 110000
************************************************

Match:
************************************************
Candidate: 110000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 110000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 000001
************************************************

Match:
************************************************
Candidate: 000001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 000001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 9

Entering cache lookup

Exiting cache lookup

Cache miss. Will have to solve the TAP for this candidate

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1454 (      0 spare) rows
        1459 (      0 spare) structural columns
        2919 (      0 spare) non-zero elements
Global Statistics
           1 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1454 rows         1459 cols         2919 elements
Presolved problem has:
      1430 rows         1436 cols         2872 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        711.028902      D    160     0        .000000     0
   545       2466.112435      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  545 simplex iterations in 0s

Final objective                         : 2.466112435164629e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 6.399998
0.000000	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 3.599997
0.000000	3.399997	3.199997	2.999997	2.799997	2.599997	2.399997	2.199997	1.999997	1.799997	1.599997	1.399997	1.199997	0.999997	0.799997	0.599997	0.399997	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 0.400000
0.000000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 5.199999
0.000000	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 4.800005
0.000000	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 2.199998
0.000000	1.999998	1.799998	1.599998	1.399998	1.199998	0.999998	0.799998	0.599998	0.399998	0.199998	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 6.599998
0.000000	6.399998	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 2.800001
0.000000	2.600001	2.400001	2.200001	2.000001	1.800001	1.600001	1.400001	1.200001	1.000001	0.800001	0.600001	0.400001	0.200001	0.000001	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 4.199996
0.000000	3.999996	3.799996	3.599996	3.399996	3.199996	2.999996	2.799996	2.599996	2.399996	2.199996	1.999996	1.799996	1.599996	1.399996	1.199996	0.999996	0.799996	0.599996	0.399996	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 10.199995
0.000000	9.999995	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799994	6.599994	6.399994	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 9.800005
0.000000	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800005	7.600005	7.400005	7.200005	7.000005	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 4.800005
0.000000	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 7.000004
0.000000	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600004	5.400004	5.200004	5.000004	4.800004	4.600003	4.400003	4.200003	4.000003	3.800003	3.600003	3.400003	3.200003	3.000003	2.800004	2.600004	2.400004	2.200004	2.000004	1.800004	1.600005	1.400005	1.200005	1.000005	0.800005	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 8] = 5.999999
0.000000	5.799999	5.599999	5.399999	5.199999	4.999999	4.799999	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2466.112435

Entering candidate fitness function

Candidate fitness: 5.397018e+03

Exiting candidate fitness function


************************************************
Iteration 4 results:
************************************************
Candidate: 000010
************************************************
Fitness: 5397.018066
************************************************

Actual time: 2.000000

Iteration 4: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 110000
************************************************

Match:
************************************************
Candidate: 110000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 110000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Actual time: 2.000000


************************************************
Generation 4(Before sorting)
************************************************
Candidate 1:  101000	Fitness value: 3.958718e+03
Candidate 2:  010000	Fitness value: 5.440842e+03
Candidate 3:  101000	Fitness value: 3.958718e+03
Candidate 4:  010000	Fitness value: 5.440842e+03
Candidate 5:  101000	Fitness value: 3.958718e+03
Candidate 6:  101000	Fitness value: 3.958718e+03
Candidate 7:  110000	Fitness value: 4.044122e+03
Candidate 8:  000001	Fitness value: 4.098042e+03
Candidate 9:  000010	Fitness value: 5.397018e+03
Candidate 10:  110000	Fitness value: 4.044122e+03
************************************************


************************************************
Generation 4(After sorting)
************************************************
Candidate 1:  101000	Fitness value: 3.958718e+03
Candidate 2:  101000	Fitness value: 3.958718e+03
Candidate 3:  101000	Fitness value: 3.958718e+03
Candidate 4:  101000	Fitness value: 3.958718e+03
Candidate 5:  110000	Fitness value: 4.044122e+03
Candidate 6:  110000	Fitness value: 4.044122e+03
Candidate 7:  000001	Fitness value: 4.098042e+03
Candidate 8:  000010	Fitness value: 5.397018e+03
Candidate 9:  010000	Fitness value: 5.440842e+03
Candidate 10:  010000	Fitness value: 5.440842e+03
************************************************

Entering crossover function

4	4	4	3	

Crossover point is 4

Second crossover point is 3
9	8	

The parent chromosomes at these indexes are the same

4	6	

Crossover point is 4

Second crossover point is 6
6	3	

3	8	

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

2	1	

Crossover point is 2

Second crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function


Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

3	2	

Crossover point is 3

Second crossover point is 2
1	9	

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 22.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 22.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

3	4	

Crossover point is 3

Second crossover point is 4
6	0	

7	3	

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

5	5	3	

Crossover point is 5

Second crossover point is 3


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Child from crossover not feasible

1	6	

Crossover point is 1

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

3	3	4	

Crossover point is 3

Second crossover point is 4
3	0	

The parent chromosomes at these indexes are the same

3	6	

Crossover point is 3

Second crossover point is 6
3	8	

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

5	4	

Crossover point is 5

Second crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

6	2	

Crossover point is 6

Second crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

1	3	

Crossover point is 1

Second crossover point is 3
0	8	

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 30.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 22.000000

Child from crossover not feasible

5	4	

Crossover point is 5

Second crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

4	6	

Crossover point is 4

Second crossover point is 6

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

6	4	

Crossover point is 6

Second crossover point is 4
0	2	

The parent chromosomes at these indexes are the same

4	6	

Crossover point is 4

Second crossover point is 6
2	2	

3	4	

Crossover point is 3

Second crossover point is 4
8	7	

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

4	3	

Crossover point is 4

Second crossover point is 3

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

5	6	

Crossover point is 5

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 11.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

3	4	

Crossover point is 3

Second crossover point is 4
0	7	

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

5	1	

Crossover point is 5

Second crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts

2	5	

Crossover point is 2

Second crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 36.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

4	6	

Crossover point is 4

Second crossover point is 6
7	3	

4	8	

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

4	1	

Crossover point is 4

Second crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 30.000000

Child from crossover not feasible


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 23.000000

Child from crossover not feasible

5	6	

Crossover point is 5

Second crossover point is 6

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

3	2	

Crossover point is 3

Second crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Crossover for the 2nd offspring in the other order is unsuccessful or we have Already tried enough attempts at generating a unique child from crossover. Reached max. limit for crossover attempts.

2	6	

Crossover point is 2

Second crossover point is 6
1	5	

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts


Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Child from crossover not feasible

4	2	

Crossover point is 4

Second crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts


Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Child from crossover not feasible

5	1	

Crossover point is 5

Second crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 32.000000

Child from crossover not feasible

Crossover for the 2nd offspring in the other order is unsuccessful or Enough attempts have been made to do a crossover operation for this pair but all crossovers have resulted in infeasible                     children

5	5	3	

Crossover point is 5

Second crossover point is 3
9	0	

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

2	6	

Crossover point is 2

Second crossover point is 6

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts


Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 7.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts

1	4	

Crossover point is 1

Second crossover point is 4

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Exiting crossover function

Entering mutation routine

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 27.000000

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 36.000000

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 29.000000

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 37.000000

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

Exiting mutation routine

Finished creating the next generation

Genetic algorithm: Iteration 5


************************************************
Generation 5
************************************************
Candidate 1: 101000
Candidate 2: 001000
Candidate 3: 011000
Candidate 4: 100010
Candidate 5: 100000
Candidate 6: 101000
Candidate 7: 000010
Candidate 8: 101000
Candidate 9: 110000
Candidate 10: 101000
************************************************

Actual time: 2.000000

Iteration 5: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 101000
************************************************

Match:
************************************************
Candidate: 101000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 2

Entering cache lookup

Exiting cache lookup

Cache miss. Will have to solve the TAP for this candidate

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1454 (      0 spare) rows
        1459 (      0 spare) structural columns
        2919 (      0 spare) non-zero elements
Global Statistics
           1 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1454 rows         1459 cols         2919 elements
Presolved problem has:
      1430 rows         1436 cols         2872 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        707.028902      D    160     0        .000000     0
   511       2476.829323      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  511 simplex iterations in 0s

Final objective                         : 2.476829322515794e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 0.599994
0.000000	0.399994	0.199994	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 5.199999
0.000000	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 4.800005
0.000000	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 1.199993
0.000000	0.999993	0.799993	0.599993	0.399993	0.199993	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 4.600000
0.000000	4.400000	4.200000	4.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 4.000003
0.000000	3.800003	3.600003	3.400003	3.200003	3.000003	2.800003	2.600003	2.400002	2.200002	2.000002	1.800002	1.600002	1.400002	1.200002	1.000002	0.800002	0.600002	0.400002	0.200002	0.000002	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 6.399998
0.000000	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 9.999999
0.000000	9.799999	9.599999	9.399999	9.199999	8.999999	8.799999	8.599999	8.399999	8.199999	7.999999	7.799999	7.599998	7.399998	7.199998	6.999998	6.799998	6.599998	6.399998	6.199998	5.999998	5.799999	5.599999	5.399999	5.199999	4.999999	4.799999	4.600000	4.400000	4.200000	4.000000	3.800000	3.600001	3.400001	3.200001	3.000001	2.800001	2.600002	2.400002	2.200002	2.000002	1.800002	1.600002	1.400002	1.200002	1.000003	0.800003	0.600003	0.400003	0.200003	0.000004	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 10.000001
0.000000	9.800001	9.600001	9.400001	9.200001	9.000001	8.800001	8.600001	8.400001	8.200001	8.000001	7.800001	7.600001	7.400001	7.200001	7.000001	6.800001	6.600001	6.400001	6.200001	6.000001	5.800001	5.600001	5.400001	5.200001	5.000002	4.800002	4.600002	4.400002	4.200002	4.000003	3.800003	3.600003	3.400003	3.200003	3.000004	2.800004	2.600004	2.400004	2.200004	2.000005	1.800004	1.600004	1.400005	1.200005	1.000005	0.800005	0.600005	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 4.800005
0.000000	4.600005	4.400005	4.200005	4.000005	3.800005	3.600005	3.400005	3.200005	3.000005	2.800005	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 5.999999
0.000000	5.799999	5.599999	5.399999	5.199999	4.999999	4.799999	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 7] = 5.800001
0.000000	5.600001	5.400001	5.200001	5.000001	4.800001	4.600001	4.400001	4.200001	4.000001	3.800001	3.600001	3.400001	3.200001	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.800000	1.600001	1.400001	1.200001	1.000001	0.800001	0.600002	0.400002	0.200002	0.000002	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2476.829323

Entering candidate fitness function

Candidate fitness: 5.278602e+03

Exiting candidate fitness function


************************************************
Iteration 5 results:
************************************************
Candidate: 001000
************************************************
Fitness: 5278.602051
************************************************

Actual time: 2.000000

Iteration 5: Candidate 3

Entering cache lookup

Exiting cache lookup

Cache miss. Will have to solve the TAP for this candidate

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1535 (      0 spare) rows
        1541 (      0 spare) structural columns
        3084 (      0 spare) non-zero elements
Global Statistics
           2 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1535 rows         1541 cols         3084 elements
Presolved problem has:
      1509 rows         1516 cols         3032 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        719.030502      D    160     0        .000000     0
   498       2446.511586      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  498 simplex iterations in 0s

Final objective                         : 2.446511585928946e+03
  Max primal violation      (abs / rel) : 5.960e-07 / 5.960e-07
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 3.599997
0.000000	3.399997	3.199997	2.999997	2.799997	2.599997	2.399997	2.199997	1.999997	1.799997	1.599997	1.399997	1.199997	0.999997	0.799997	0.599997	0.399997	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 0.599999
0.000000	0.399999	0.199999	-0.000001	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 3.599997
0.000000	3.399997	3.199997	2.999997	2.799997	2.599997	2.399997	2.199997	1.999997	1.799997	1.599997	1.399997	1.199997	0.999997	0.799997	0.599997	0.399997	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 3.600007
0.000000	3.400007	3.200007	3.000007	2.800007	2.600007	2.400007	2.200006	2.000006	1.800006	1.600006	1.400006	1.200006	1.000006	0.800006	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 1.199999
0.000000	0.999999	0.799999	0.599999	0.399999	0.199999	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 4.200006
0.000000	4.000006	3.800006	3.600006	3.400006	3.200006	3.000006	2.800006	2.600006	2.400006	2.200006	2.000006	1.800006	1.600006	1.400006	1.200006	1.000005	0.800005	0.600005	0.400005	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 3.600007
0.000000	3.400007	3.200007	3.000007	2.800007	2.600007	2.400007	2.200006	2.000006	1.800006	1.600006	1.400006	1.200006	1.000006	0.800006	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 6.399998
0.000000	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 3.599997
0.000000	3.399997	3.199997	2.999997	2.799997	2.599997	2.399997	2.199997	1.999997	1.799997	1.599997	1.399997	1.199997	0.999997	0.799997	0.599997	0.399997	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 1.199999
0.000000	0.999999	0.799999	0.599999	0.399999	0.199999	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 6.399998
0.000000	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 10] = 5.199999
0.000000	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599999	3.399999	3.199999	2.999999	2.799999	2.599999	2.399999	2.199999	1.999999	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 7] = 5.799999
0.000000	5.599999	5.399999	5.199999	4.999999	4.799999	4.599999	4.399999	4.199999	3.999999	3.799999	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2446.511586

Entering candidate fitness function

Candidate fitness: 5.219005e+03

Exiting candidate fitness function


************************************************
Iteration 5 results:
************************************************
Candidate: 011000
************************************************
Fitness: 5219.005371
************************************************

Actual time: 2.000000

Iteration 5: Candidate 4

Entering cache lookup

Exiting cache lookup

Cache miss. Will have to solve the TAP for this candidate

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1535 (      0 spare) rows
        1541 (      0 spare) structural columns
        3084 (      0 spare) non-zero elements
Global Statistics
           2 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1535 rows         1541 cols         3084 elements
Presolved problem has:
      1510 rows         1517 cols         3034 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        358.030451      D     81     0        .000000     0
   485       2087.827608      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  485 simplex iterations in 0s

Final objective                         : 2.087827608114467e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 6.000005
0.000000	5.800005	5.600005	5.400005	5.200005	5.000005	4.800005	4.600005	4.400005	4.200005	4.000005	3.800004	3.600004	3.400004	3.200004	3.000004	2.800004	2.600004	2.400004	2.200004	2.000004	1.800004	1.600005	1.400005	1.200005	1.000005	0.800005	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 6.399998
0.000000	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 6.000005
0.000000	5.800005	5.600005	5.400005	5.200005	5.000005	4.800005	4.600005	4.400005	4.200005	4.000005	3.800004	3.600004	3.400004	3.200004	3.000004	2.800004	2.600004	2.400004	2.200004	2.000004	1.800004	1.600005	1.400005	1.200005	1.000005	0.800005	0.600006	0.400006	0.200006	0.000006	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 0.000006
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 2.399998
0.000000	2.199998	1.999998	1.799998	1.599998	1.399998	1.199998	0.999998	0.799998	0.599998	0.399997	0.199997	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 4.000000
0.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 3.199997
0.000000	2.999997	2.799997	2.599997	2.399997	2.199997	1.999997	1.799997	1.599997	1.399997	1.199997	0.999997	0.799997	0.599997	0.399997	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 6.799998
0.000000	6.599998	6.399998	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399997	4.199997	3.999997	3.799997	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 2.600008
0.000000	2.400008	2.200008	2.000008	1.800008	1.600008	1.400007	1.200007	1.000007	0.800007	0.600007	0.400007	0.200007	0.000007	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 4.199996
0.000000	3.999996	3.799996	3.599996	3.399996	3.199996	2.999996	2.799996	2.599996	2.399996	2.199996	1.999996	1.799996	1.599996	1.399996	1.199996	0.999996	0.799996	0.599996	0.399996	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 10.199995
0.000000	9.999995	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799994	6.599994	6.399994	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 9.800005
0.000000	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800005	7.600005	7.400005	7.200005	7.000005	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 4.000000
0.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 7.199997
0.000000	6.999997	6.799997	6.599997	6.399997	6.199997	5.999997	5.799997	5.599997	5.399997	5.199997	4.999997	4.799997	4.599997	4.399997	4.199997	3.999997	3.799997	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 6] = 7.599997
0.000000	7.399997	7.199997	6.999997	6.799997	6.599997	6.399997	6.199997	5.999997	5.799997	5.599997	5.399997	5.199997	4.999997	4.799997	4.599997	4.399997	4.199996	3.999996	3.799996	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 8] = 5.999999
0.000000	5.799999	5.599999	5.399999	5.199999	4.999999	4.799999	4.599998	4.399998	4.199998	3.999998	3.799998	3.599998	3.399998	3.199998	2.999998	2.799998	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2087.827608

Entering candidate fitness function

Candidate fitness: 3.976985e+03

Exiting candidate fitness function


************************************************
Iteration 5 results:
************************************************
Candidate: 100010
************************************************
Fitness: 3976.985352
************************************************

Actual time: 2.000000

Iteration 5: Candidate 5

Entering cache lookup

Exiting cache lookup

Cache miss. Will have to solve the TAP for this candidate

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	5 6	5 9	6 10	6 7	7 11	7 8	8 12	11 12	4 8	9 10	10 11	

Reading Problem TAP
Problem Statistics
        1454 (      0 spare) rows
        1459 (      0 spare) structural columns
        2919 (      0 spare) non-zero elements
Global Statistics
           1 entities        0 sets        0 set members

Actual time: 2.000000
Minimizing LP TAP
Original problem has:
      1454 rows         1459 cols         2919 elements
Presolved problem has:
      1431 rows         1437 cols         2874 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        347.028851      D     81     0        .000000     0
   488       2166.540561      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  488 simplex iterations in 0s

Final objective                         : 2.166540560541779e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Actual time: 2.000000

Inside print function

Travelers on all the links
[1, 2] = 6.000002
0.000000	5.800002	5.600002	5.400002	5.200002	5.000002	4.800002	4.600002	4.400002	4.200002	4.000002	3.800002	3.600002	3.400002	3.200002	3.000002	2.800002	2.600002	2.400002	2.200001	2.000002	1.800002	1.600002	1.400002	1.200002	1.000003	0.800003	0.600003	0.400003	0.200003	0.000004	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 5] = 6.400001
0.000000	6.200001	6.000001	5.800001	5.600001	5.400001	5.200001	5.000001	4.800001	4.600001	4.400001	4.200001	4.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200001	2.000001	1.800001	1.600001	1.400001	1.200001	1.000002	0.800002	0.600002	0.400002	0.200002	0.000003	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 3] = 6.000002
0.000000	5.800002	5.600002	5.400002	5.200002	5.000002	4.800002	4.600002	4.400002	4.200002	4.000002	3.800002	3.600002	3.400002	3.200002	3.000002	2.800002	2.600002	2.400002	2.200001	2.000002	1.800002	1.600002	1.400002	1.200002	1.000003	0.800003	0.600003	0.400003	0.200003	0.000004	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[2, 6] = 0.000000
0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 4] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[3, 7] = 2.400002
0.000000	2.200002	2.000002	1.800002	1.600002	1.400002	1.200001	1.000001	0.800001	0.600001	0.400001	0.200001	0.000001	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 6] = 2.400000
0.000000	2.200000	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[5, 9] = 4.000000
0.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 10] = 3.200000
0.000000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.799999	1.599999	1.399999	1.199999	0.999999	0.799999	0.599999	0.399999	0.199999	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[6, 7] = 6.799998
0.000000	6.599998	6.399998	6.199998	5.999998	5.799998	5.599998	5.399998	5.199998	4.999998	4.799998	4.599998	4.399997	4.199997	3.999997	3.799997	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 11] = 2.800005
0.000000	2.600005	2.400005	2.200005	2.000005	1.800005	1.600005	1.400005	1.200005	1.000005	0.800004	0.600004	0.400004	0.200004	0.000004	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[7, 8] = 6.399995
0.000000	6.199995	5.999995	5.799995	5.599995	5.399995	5.199995	4.999995	4.799994	4.599994	4.399994	4.199994	3.999994	3.799994	3.599994	3.399994	3.199994	2.999994	2.799994	2.599994	2.399994	2.199994	1.999995	1.799995	1.599995	1.399995	1.199995	0.999995	0.799996	0.599996	0.399996	0.199996	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[8, 12] = 9.999995
0.000000	9.799995	9.599995	9.399995	9.199995	8.999995	8.799995	8.599995	8.399995	8.199995	7.999995	7.799995	7.599995	7.399995	7.199995	6.999995	6.799995	6.599995	6.399995	6.199995	5.999995	5.799995	5.599995	5.399995	5.199996	4.999996	4.799996	4.599996	4.399996	4.199996	3.999997	3.799997	3.599997	3.399997	3.199997	2.999998	2.799998	2.599998	2.399998	2.199998	1.999999	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[11, 12] = 10.000005
0.000000	9.800005	9.600005	9.400005	9.200005	9.000005	8.800005	8.600005	8.400005	8.200005	8.000005	7.800004	7.600004	7.400004	7.200004	7.000004	6.800004	6.600004	6.400004	6.200004	6.000004	5.800004	5.600005	5.400005	5.200005	5.000005	4.800005	4.600006	4.400006	4.200006	4.000006	3.800006	3.600007	3.400007	3.200007	3.000007	2.800007	2.600008	2.400008	2.200008	2.000008	1.800008	1.600008	1.400008	1.200008	1.000009	0.800009	0.600009	0.400009	0.200009	0.000010	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[4, 8] = 3.600001
0.000000	3.400001	3.200001	3.000001	2.800001	2.600001	2.400001	2.200001	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[9, 10] = 4.000000
0.000000	3.800000	3.600000	3.400000	3.200000	3.000000	2.800000	2.600000	2.400000	2.200000	2.000000	1.800000	1.600000	1.400000	1.200000	1.000000	0.800000	0.600000	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[10, 11] = 7.200000
0.000000	7.000000	6.800000	6.600000	6.400000	6.200000	6.000000	5.800000	5.600000	5.400000	5.200000	5.000000	4.800000	4.600000	4.400000	4.200000	4.000000	3.799999	3.599999	3.399999	3.200000	3.000000	2.800000	2.600000	2.400000	2.200001	2.000001	1.800001	1.600001	1.400001	1.200001	1.000002	0.800002	0.600002	0.400002	0.200002	0.000003	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	

[1, 6] = 7.599997
0.000000	7.399997	7.199997	6.999997	6.799997	6.599997	6.399997	6.199997	5.999997	5.799997	5.599997	5.399997	5.199997	4.999997	4.799997	4.599997	4.399997	4.199996	3.999996	3.799996	3.599997	3.399997	3.199997	2.999997	2.799997	2.599998	2.399998	2.199998	1.999998	1.799998	1.599998	1.399999	1.199999	0.999999	0.799999	0.599999	0.400000	0.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	


Exiting print function

Objective value: 2166.540561

Entering candidate fitness function

Candidate fitness: 4.080758e+03

Exiting candidate fitness function


************************************************
Iteration 5 results:
************************************************
Candidate: 100000
************************************************
Fitness: 4080.758057
************************************************

Actual time: 2.000000

Iteration 5: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 101000
************************************************

Match:
************************************************
Candidate: 101000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 000010
************************************************

Match:
************************************************
Candidate: 000010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 000010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 101000
************************************************

Match:
************************************************
Candidate: 101000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 110000
************************************************

Match:
************************************************
Candidate: 110000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 110000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 101000
************************************************

Match:
************************************************
Candidate: 101000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Actual time: 2.000000


************************************************
Generation 5(Before sorting)
************************************************
Candidate 1:  101000	Fitness value: 3.958718e+03
Candidate 2:  001000	Fitness value: 5.278602e+03
Candidate 3:  011000	Fitness value: 5.219005e+03
Candidate 4:  100010	Fitness value: 3.976985e+03
Candidate 5:  100000	Fitness value: 4.080758e+03
Candidate 6:  101000	Fitness value: 3.958718e+03
Candidate 7:  000010	Fitness value: 5.397018e+03
Candidate 8:  101000	Fitness value: 3.958718e+03
Candidate 9:  110000	Fitness value: 4.044122e+03
Candidate 10:  101000	Fitness value: 3.958718e+03
************************************************

Genetic algorithm terminates because the objective function value has remained the same for a long time

Final objective value for DNDP is 3958.718018
