1. Use a single bit for encoding of a new link. We can have a void * pointer in the candidate data structure and initialize this pointer to a memory location allocated in the main function for some number of bytes calculated using (NL/8).

2. Implement tournament selection. Otherwise better generations cannot be produced since crossover operations will always happen between the same pairs to a certain extent.

3. Convert C to C++ code.

4. Can cache the results of the previous generation/ all generations till now for all the unique candidates to avoid repeated computation of problems by re using these results. Could be implemented as a 1D array whose size is determined at runtime based on the number of iterations and generation size and also on maybe caching only the top n values of a particular generation instead of all. Also a hash table could be implemented for large amount of caching.

5. Stop the genetic algorithm based on objective function value stagnation over a sequence of iterations say 5.

6. Use memcmp instead of an iterative byte by byte comparison.

7. Make the application configurable for different settings of genetic algorithm parameters.

8. For low budgets keep the MAX_BEST_ITERATIONS value low whereas for higher budget problems keep this macro value high.

9. Crossover operations result in new candidates. We can try to see that these candidates are not the same as the ones already generated in our present parent population or we can always keep a global set of candidates generated but this will result in a huge search time.

10. Create only how many children are feasibly possible even if the resultant pool size is small. If by repeated attempts we do not get unique children then do not add duplicates to the pool.

11. If zero no. of children have been generated from crossover operations since the last few iterations then we can stop the genetic algorithm
because it does not help to continue further without any more improvements. "Not correct".

12. Siouxfalls network not producing correct values. We can try to test by just solving the TAP. For this case, we can add new links to the existing links itself and solve the TAP to verify. Produces correctly now as the problem was not defining the capacities for new links due to which the objective function value was always appearing to be the same. [DONE]

13. Cache should not only store the previous generation but also the generation of children.

14. Removal of candidates in the pool to avoid selecting the same. We could restore the hole after removal of candidate in the pool by moving the last candidate in the pool to this hole and using realloc to shrink the pool's memory size.

15. We can optimize the space usage by having for each OD pair in Fa_rs only EL+NL number of cells. [DONE]

16. Optimize the XPRB.....   2D array data members in the model data structure and minimize their space usage. It looks like the biggest bottleneck in performance. [DONE]

17. We can use bitmasks to check if a previous point was selected.

18. Use elitism strategy to copy over the fittest in a particular generation to the next generation.

19. Use children of both the crossover orders for the same pair of parent chromosomes.

20. We can try in sequence with 1 point, 2 point and multi point crossover in the crossover function in the order of failure of these operations to produce any valid child.

21. To test the correctness of the solution, the below approach can be followed:
	From the data on OD flows, compute internally the total incoming and outgoing flow for every node. Compare this with the same data
	that we can compute using the flows obtained by solving a TAP everytime. The difference in these values could be represented
	as an absolute value.
