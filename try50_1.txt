
WARNING:  Please remember to change the settings for low budget problems to avoid getting stuck in an infinite loop. For low budget problems check_duplicate function is not a good idea as there are few feasible candidates in problems for low budget and one cannot avoid duplicates


Inside parse function

Reading from data file started

1 2 20

1 5 18

2 3 23

2 6 19

3 4 17

3 7 16

5 6 14

5 9 24

6 10 20

6 7 17

7 11 26

7 8 13

8 12 19

11 12 17

4 8 22

9 10 7

10 11 18

Partial parsing finished

1 6 19.000000 7.000000

5 10 25.000000 12.000000

2 7 30.000000 7.000000

6 11 32.000000 15.000000

3 8 21.000000 11.000000

7 12 28.000000 18.000000

Printing network data

[1,1]:0.00 0.00	[1,2]:0.00 20.00	[1,3]:0.00 0.00	[1,4]:0.00 0.00	[1,5]:0.00 18.00	[1,6]:0.00 19.00	[1,7]:0.00 0.00	[1,8]:0.00 0.00	[1,9]:0.00 0.00	[1,10]:0.00 0.00	[1,11]:0.00 0.00	[1,12]:20.00 0.00	
[2,1]:0.00 0.00	[2,2]:0.00 0.00	[2,3]:0.00 23.00	[2,4]:0.00 0.00	[2,5]:0.00 0.00	[2,6]:0.00 19.00	[2,7]:0.00 30.00	[2,8]:0.00 0.00	[2,9]:0.00 0.00	[2,10]:0.00 0.00	[2,11]:0.00 0.00	[2,12]:0.00 0.00	
[3,1]:0.00 0.00	[3,2]:0.00 0.00	[3,3]:0.00 0.00	[3,4]:0.00 17.00	[3,5]:0.00 0.00	[3,6]:0.00 0.00	[3,7]:0.00 16.00	[3,8]:0.00 21.00	[3,9]:0.00 0.00	[3,10]:0.00 0.00	[3,11]:0.00 0.00	[3,12]:0.00 0.00	
[4,1]:0.00 0.00	[4,2]:0.00 0.00	[4,3]:0.00 0.00	[4,4]:0.00 0.00	[4,5]:0.00 0.00	[4,6]:0.00 0.00	[4,7]:0.00 0.00	[4,8]:0.00 22.00	[4,9]:0.00 0.00	[4,10]:0.00 0.00	[4,11]:0.00 0.00	[4,12]:0.00 0.00	
[5,1]:0.00 0.00	[5,2]:0.00 0.00	[5,3]:0.00 0.00	[5,4]:0.00 0.00	[5,5]:0.00 0.00	[5,6]:0.00 14.00	[5,7]:0.00 0.00	[5,8]:0.00 0.00	[5,9]:0.00 24.00	[5,10]:0.00 25.00	[5,11]:0.00 0.00	[5,12]:0.00 0.00	
[6,1]:0.00 0.00	[6,2]:0.00 0.00	[6,3]:0.00 0.00	[6,4]:0.00 0.00	[6,5]:0.00 0.00	[6,6]:0.00 0.00	[6,7]:0.00 17.00	[6,8]:0.00 0.00	[6,9]:0.00 0.00	[6,10]:0.00 20.00	[6,11]:0.00 32.00	[6,12]:0.00 0.00	
[7,1]:0.00 0.00	[7,2]:0.00 0.00	[7,3]:0.00 0.00	[7,4]:0.00 0.00	[7,5]:0.00 0.00	[7,6]:0.00 0.00	[7,7]:0.00 0.00	[7,8]:0.00 13.00	[7,9]:0.00 0.00	[7,10]:0.00 0.00	[7,11]:0.00 26.00	[7,12]:0.00 28.00	
[8,1]:0.00 0.00	[8,2]:0.00 0.00	[8,3]:0.00 0.00	[8,4]:0.00 0.00	[8,5]:0.00 0.00	[8,6]:0.00 0.00	[8,7]:0.00 0.00	[8,8]:0.00 0.00	[8,9]:0.00 0.00	[8,10]:0.00 0.00	[8,11]:0.00 0.00	[8,12]:0.00 19.00	
[9,1]:0.00 0.00	[9,2]:0.00 0.00	[9,3]:0.00 0.00	[9,4]:0.00 0.00	[9,5]:0.00 0.00	[9,6]:0.00 0.00	[9,7]:0.00 0.00	[9,8]:0.00 0.00	[9,9]:0.00 0.00	[9,10]:0.00 7.00	[9,11]:0.00 0.00	[9,12]:0.00 0.00	
[10,1]:0.00 0.00	[10,2]:0.00 0.00	[10,3]:0.00 0.00	[10,4]:0.00 0.00	[10,5]:0.00 0.00	[10,6]:0.00 0.00	[10,7]:0.00 0.00	[10,8]:0.00 0.00	[10,9]:0.00 0.00	[10,10]:0.00 0.00	[10,11]:0.00 18.00	[10,12]:0.00 0.00	
[11,1]:0.00 0.00	[11,2]:0.00 0.00	[11,3]:0.00 0.00	[11,4]:0.00 0.00	[11,5]:0.00 0.00	[11,6]:0.00 0.00	[11,7]:0.00 0.00	[11,8]:0.00 0.00	[11,9]:0.00 0.00	[11,10]:0.00 0.00	[11,11]:0.00 0.00	[11,12]:0.00 17.00	
[12,1]:0.00 0.00	[12,2]:0.00 0.00	[12,3]:0.00 0.00	[12,4]:0.00 0.00	[12,5]:0.00 0.00	[12,6]:0.00 0.00	[12,7]:0.00 0.00	[12,8]:0.00 0.00	[12,9]:0.00 0.00	[12,10]:0.00 0.00	[12,11]:0.00 0.00	[12,12]:0.00 0.00	
Exiting parse function

Entering generate_rand

Entering encode_ga_cand
0 1 0 1 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 38.000000

Exiting feasiblity

Entering encode_ga_cand
0 1 0 1 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 38.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Duplicate random candidate generated. Ignoring it and continuing with further attempts.

Entering encode_ga_cand
0 0 1 1 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 0 0 1 0 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 0 0 0 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 1 0 0 0 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 12.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 1 1 1 0 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 1 0 1 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 38.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Duplicate random candidate generated. Ignoring it and continuing with further attempts.

Entering encode_ga_cand
0 1 1 0 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 37.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 0 0 1 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 51.000000

Not feasible

Entering encode_ga_cand
1 0 1 0 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 0 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 0 1 1 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Exiting generate_rand

Genetic algorithm: Iteration 1


************************************************
Generation 1
************************************************
Candidate 1: 010110
Candidate 2: 001110
Candidate 3: 100101
Candidate 4: 100010
Candidate 5: 010000
Candidate 6: 011100
Candidate 7: 011001
Candidate 8: 101010
Candidate 9: 101000
Candidate 10: 001101
************************************************

Iteration 1: Candidate 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1588 rows         1596 cols         3192 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        738.032102      D    160     0        .000000     0
   440       2370.291681      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  440 simplex iterations in 0s

Final objective                         : 2.370291681416282e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 9.999995
[1, 5] = 10.000005
[2, 3] = 5.599995
[2, 6] = 4.400000
[3, 4] = 0.000000
[3, 7] = 0.000000
[5, 6] = 4.800005
[5, 9] = 0.000000
[6, 10] = 0.000000
[6, 7] = 4.400000
[7, 11] = 0.000000
[7, 8] = 4.400000
[8, 12] = 9.999995
[11, 12] = 10.000005
[4, 8] = 0.000000
[9, 10] = 0.000000
[10, 11] = 5.199999
[5, 10] = 5.199999
[6, 11] = 4.800005
[3, 8] = 5.599995

Objective value: 2370.291681

Entering candidate fitness function

Candidate fitness: 5075.697754

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 010110
************************************************
Fitness: 5075.697754
************************************************

Iteration 1: Candidate 2

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1588 rows         1596 cols         3192 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        733.032102      D    160     0        .000000     0
   461       2366.411564      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  461 simplex iterations in 0s

Final objective                         : 2.366411564179889e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 10.000005
[1, 5] = 9.999995
[2, 3] = 5.000000
[2, 6] = 0.000000
[3, 4] = 0.000000
[3, 7] = 0.000000
[5, 6] = 5.399999
[5, 9] = 4.599996
[6, 10] = 0.000000
[6, 7] = 0.000000
[7, 11] = 0.000000
[7, 8] = 5.000005
[8, 12] = 10.000005
[11, 12] = 9.999995
[4, 8] = 0.000000
[9, 10] = 4.599996
[10, 11] = 4.599996
[2, 7] = 5.000005
[6, 11] = 5.399999
[3, 8] = 5.000000

Objective value: 2366.411564

Entering candidate fitness function

Candidate fitness: 5071.697754

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 001110
************************************************
Fitness: 5071.697754
************************************************

Iteration 1: Candidate 3

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1590 rows         1598 cols         3196 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         40.032000      D      2     0        .000000     0
   413       1797.615087      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  413 simplex iterations in 0s

Final objective                         : 1.797615086902000e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 5.799999
[1, 5] = 6.400004
[2, 3] = 5.600005
[2, 6] = 0.199994
[3, 4] = 0.600006
[3, 7] = 5.000000
[5, 6] = 3.400007
[5, 9] = 2.999997
[6, 10] = 0.000000
[6, 7] = 6.799998
[7, 11] = 0.000000
[7, 8] = 5.000000
[8, 12] = 5.600005
[11, 12] = 7.599997
[4, 8] = 0.600006
[9, 10] = 2.999997
[10, 11] = 2.999997
[1, 6] = 7.799997
[6, 11] = 4.600000
[7, 12] = 6.799998

Objective value: 1797.615087

Entering candidate fitness function

Candidate fitness: 2532.715088

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 100101
************************************************
Fitness: 2532.715088
************************************************

Iteration 1: Candidate 4

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1538 (      0 spare) rows
        1539 (      0 spare) structural columns
        3088 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1538 rows         1539 cols         3088 elements
Presolved problem has:
      1510 rows         1517 cols         3034 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        358.030451      D     81     0        .000000     0
   485       2087.827608      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  485 simplex iterations in 0s

Final objective                         : 2.087827608114467e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 6.000005
[1, 5] = 6.399998
[2, 3] = 6.000005
[2, 6] = 0.000000
[3, 4] = 0.000000
[3, 7] = 0.000006
[5, 6] = 2.399998
[5, 9] = 4.000000
[6, 10] = 3.199997
[6, 7] = 6.799998
[7, 11] = 2.600008
[7, 8] = 4.199996
[8, 12] = 10.199995
[11, 12] = 9.800005
[4, 8] = 0.000000
[9, 10] = 4.000000
[10, 11] = 7.199997
[1, 6] = 7.599997
[3, 8] = 5.999999

Objective value: 2087.827608

Entering candidate fitness function

Candidate fitness: 3976.985352

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 100010
************************************************
Fitness: 3976.985352
************************************************

Iteration 1: Candidate 5

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1458 (      0 spare) rows
        1458 (      0 spare) structural columns
        2927 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1458 rows         1458 cols         2927 elements
Presolved problem has:
      1430 rows         1436 cols         2872 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        712.028902      D    160     0        .000000     0
   523       2510.437186      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  523 simplex iterations in 0s

Final objective                         : 2.510437185538092e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 9.800005
[1, 5] = 10.199995
[2, 3] = 6.199998
[2, 6] = 3.600007
[3, 4] = 3.600001
[3, 7] = 2.599998
[5, 6] = 2.799998
[5, 9] = 2.199998
[6, 10] = 0.000000
[6, 7] = 6.400004
[7, 11] = 2.600008
[7, 8] = 6.399995
[8, 12] = 9.999995
[11, 12] = 10.000005
[4, 8] = 3.600001
[9, 10] = 2.199998
[10, 11] = 7.399997
[5, 10] = 5.199999

Objective value: 2510.437186

Entering candidate fitness function

Candidate fitness: 5440.841797

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 010000
************************************************
Fitness: 5440.841797
************************************************

Iteration 1: Candidate 6

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1588 rows         1596 cols         3192 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        734.032102      D    160     0        .000000     0
   453       2409.112275      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  453 simplex iterations in 0s

Final objective                         : 2.409112274921549e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 9.999995
[1, 5] = 10.000005
[2, 3] = 3.200007
[2, 6] = 1.599989
[3, 4] = 3.200007
[3, 7] = 0.000000
[5, 6] = 4.800005
[5, 9] = 0.000000
[6, 10] = 0.000000
[6, 7] = 1.399999
[7, 11] = 0.000000
[7, 8] = 6.599998
[8, 12] = 9.800005
[11, 12] = 10.199995
[4, 8] = 3.200007
[9, 10] = 0.000000
[10, 11] = 5.199999
[5, 10] = 5.199999
[2, 7] = 5.199999
[6, 11] = 4.999996

Objective value: 2409.112275

Entering candidate fitness function

Candidate fitness: 5136.200684

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 011100
************************************************
Fitness: 5136.200684
************************************************

Iteration 1: Candidate 7

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1589 rows         1597 cols         3194 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        397.032051      D     81     0        .000000     0
   436       2100.529728      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  436 simplex iterations in 0s

Final objective                         : 2.100529727653006e+03
  Max primal violation      (abs / rel) : 9.537e-07 / 9.537e-07
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 9.999995
[1, 5] = 10.000005
[2, 3] = 3.000003
[2, 6] = 0.999993
[3, 4] = 0.400006
[3, 7] = 2.599998
[5, 6] = 3.800006
[5, 9] = 0.999999
[6, 10] = 0.000000
[6, 7] = 4.800000
[7, 11] = 0.000000
[7, 8] = 5.799999
[8, 12] = 6.200005
[11, 12] = 6.199998
[4, 8] = 0.400006
[9, 10] = 0.999999
[10, 11] = 6.199998
[5, 10] = 5.199999
[2, 7] = 5.999999
[7, 12] = 7.599997

Objective value: 2100.529728

Entering candidate fitness function

Candidate fitness: 3821.488525

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 011001
************************************************
Fitness: 3821.488525
************************************************

Iteration 1: Candidate 8

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1589 rows         1597 cols         3194 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        365.032051      D     81     0        .000000     0
   462       2071.481926      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  462 simplex iterations in 0s

Final objective                         : 2.071481926481052e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 7.000004
[1, 5] = 5.799999
[2, 3] = 4.600000
[2, 6] = 0.000000
[3, 4] = 0.000000
[3, 7] = 0.000000
[5, 6] = 1.999998
[5, 9] = 3.800001
[6, 10] = 2.999997
[6, 7] = 6.199998
[7, 11] = 3.199997
[7, 8] = 5.400005
[8, 12] = 10.000005
[11, 12] = 9.999995
[4, 8] = 0.000000
[9, 10] = 3.800001
[10, 11] = 6.799998
[1, 6] = 7.199997
[2, 7] = 2.400004
[3, 8] = 4.600000

Objective value: 2071.481926

Entering candidate fitness function

Candidate fitness: 3821.849365

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 101010
************************************************
Fitness: 3821.849365
************************************************

Iteration 1: Candidate 9

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1538 (      0 spare) rows
        1539 (      0 spare) structural columns
        3088 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1538 rows         1539 cols         3088 elements
Presolved problem has:
      1510 rows         1517 cols         3034 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        354.030451      D     81     0        .000000     0
   463       2128.494164      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  463 simplex iterations in 0s

Final objective                         : 2.128494163537059e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 6.999998
[1, 5] = 5.799999
[2, 3] = 2.800007
[2, 6] = 0.000000
[3, 4] = 2.800007
[3, 7] = 0.000000
[5, 6] = 1.999998
[5, 9] = 3.800001
[6, 10] = 2.999997
[6, 7] = 6.200005
[7, 11] = 3.399997
[7, 8] = 6.999998
[8, 12] = 9.800005
[11, 12] = 10.199995
[4, 8] = 2.800007
[9, 10] = 3.800001
[10, 11] = 6.799998
[1, 6] = 7.200004
[2, 7] = 4.199990

Objective value: 2128.494164

Entering candidate fitness function

Candidate fitness: 3958.718018

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 101000
************************************************
Fitness: 3958.718018
************************************************

Iteration 1: Candidate 10

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1589 rows         1597 cols         3194 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        400.032051      D     81     0        .000000     0
   460       2116.929675      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  460 simplex iterations in 0s

Final objective                         : 2.116929674945034e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 10.000005
[1, 5] = 9.999995
[2, 3] = 2.599998
[2, 6] = 1.600008
[3, 4] = 0.000000
[3, 7] = 2.599998
[5, 6] = 5.799999
[5, 9] = 4.199996
[6, 10] = 0.000000
[6, 7] = 4.600000
[7, 11] = 0.000000
[7, 8] = 5.799999
[8, 12] = 5.799999
[11, 12] = 7.000004
[4, 8] = 0.000000
[9, 10] = 4.199996
[10, 11] = 4.199996
[2, 7] = 5.799999
[6, 11] = 2.800007
[7, 12] = 7.199997

Objective value: 2116.929675

Entering candidate fitness function

Candidate fitness: 3797.288330

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 001101
************************************************
Fitness: 3797.288330
************************************************


************************************************
Generation 1(Before sorting)
************************************************
Candidate 1:  010110	Fitness value: 5075.697754
Candidate 2:  001110	Fitness value: 5071.697754
Candidate 3:  100101	Fitness value: 2532.715088
Candidate 4:  100010	Fitness value: 3976.985352
Candidate 5:  010000	Fitness value: 5440.841797
Candidate 6:  011100	Fitness value: 5136.200684
Candidate 7:  011001	Fitness value: 3821.488525
Candidate 8:  101010	Fitness value: 3821.849365
Candidate 9:  101000	Fitness value: 3958.718018
Candidate 10:  001101	Fitness value: 3797.288330
************************************************


************************************************
Generation 1(After sorting)
************************************************
Candidate 1:  100101	Fitness value: 2532.715088
Candidate 2:  001101	Fitness value: 3797.288330
Candidate 3:  011001	Fitness value: 3821.488525
Candidate 4:  101010	Fitness value: 3821.849365
Candidate 5:  101000	Fitness value: 3958.718018
Candidate 6:  100010	Fitness value: 3976.985352
Candidate 7:  001110	Fitness value: 5071.697754
Candidate 8:  010110	Fitness value: 5075.697754
Candidate 9:  011100	Fitness value: 5136.200684
Candidate 10:  010000	Fitness value: 5440.841797
************************************************

Entering crossover function

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 30.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 27.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Exiting crossover function


************************************************
Children generated after crossover for Generation 1
************************************************
Candidate 1: 101101
Candidate 2: 011010
Candidate 3: 101110
Candidate 4: 010100
************************************************

Entering mutation routine

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Mutation successfully done for candidate 1 in the pool of children

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 52.000000

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Mutation successfully done for candidate 3 in the pool of children

Exiting mutation routine


************************************************
Children generated after mutation for Generation 1
************************************************
Candidate 1: 100101
Candidate 2: 011010
Candidate 3: 101100
Candidate 4: 010100
************************************************
Iteration(Generation): 1, Child no: 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1590 rows         1598 cols         3196 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         40.032000      D      2     0        .000000     0
   413       1797.615087      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  413 simplex iterations in 0s

Final objective                         : 1.797615086902000e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 1797.615087

Entering candidate fitness function

Candidate fitness: 2532.715088

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 100101
************************************************
Fitness: 2532.715088
************************************************
Iteration(Generation): 1, Child no: 2

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1588 rows         1596 cols         3192 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        730.032102      D    160     0        .000000     0
   451       2378.643118      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  451 simplex iterations in 0s

Final objective                         : 2.378643117524098e+03
  Max primal violation      (abs / rel) : 2.384e-07 / 2.384e-07
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2378.643118

Entering candidate fitness function

Candidate fitness: 5095.055664

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 011010
************************************************
Fitness: 5095.055664
************************************************
Iteration(Generation): 1, Child no: 3

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1589 rows         1597 cols         3194 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        369.032051      D     81     0        .000000     0
   438       2061.012086      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  438 simplex iterations in 0s

Final objective                         : 2.061012086191868e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2061.012086

Entering candidate fitness function

Candidate fitness: 3777.499512

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 101100
************************************************
Fitness: 3777.499512
************************************************
Iteration(Generation): 1, Child no: 4

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1538 (      0 spare) rows
        1539 (      0 spare) structural columns
        3088 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1538 rows         1539 cols         3088 elements
Presolved problem has:
      1509 rows         1516 cols         3032 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        727.030502      D    160     0        .000000     0
   464       2445.512845      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  464 simplex iterations in 0s

Final objective                         : 2.445512845390501e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2445.512845

Entering candidate fitness function

Candidate fitness: 5196.411133

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 010100
************************************************
Fitness: 5196.411133
************************************************


************************************************
Children sorted after crossover and mutation for Generation 1
************************************************
Candidate 1:  100101	Fitness value: 2532.715088
Candidate 2:  101100	Fitness value: 3777.499512
Candidate 3:  011010	Fitness value: 5095.055664
Candidate 4:  010100	Fitness value: 5196.411133
************************************************

Status:  l = 10, k = 2, j = 8, pool_size = 4


Finished creating the next generation

Freed ga population

Genetic algorithm: Iteration 2


************************************************
Generation 2
************************************************
Candidate 1: 100101
Candidate 2: 100101
Candidate 3: 101100
Candidate 4: 001101
Candidate 5: 011001
Candidate 6: 101010
Candidate 7: 101000
Candidate 8: 100010
Candidate 9: 001110
Candidate 10: 010110
************************************************

Iteration 2: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 3

Entering cache lookup

Exiting cache lookup

Cache miss. Will have to solve the TAP for this candidate

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1589 rows         1597 cols         3194 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        369.032051      D     81     0        .000000     0
   438       2061.012086      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  438 simplex iterations in 0s

Final objective                         : 2.061012086191868e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 6.199998
[1, 5] = 6.200005
[2, 3] = 2.800007
[2, 6] = 0.000000
[3, 4] = 2.800007
[3, 7] = 0.000000
[5, 6] = 2.400004
[5, 9] = 3.800001
[6, 10] = 0.599996
[6, 7] = 3.600007
[7, 11] = 0.000000
[7, 8] = 6.999998
[8, 12] = 9.800005
[11, 12] = 10.199995
[4, 8] = 2.800007
[9, 10] = 3.800001
[10, 11] = 4.399996
[1, 6] = 7.599997
[2, 7] = 3.399991
[6, 11] = 5.799999

Objective value: 2061.012086

Entering candidate fitness function

Candidate fitness: 3777.499512

Exiting candidate fitness function


************************************************
Iteration 2 results:
************************************************
Candidate: 101100
************************************************
Fitness: 3777.499512
************************************************

Iteration 2: Candidate 4

Entering cache lookup

Pattern:
************************************************
Candidate: 001101
************************************************

Match:
************************************************
Candidate: 001101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 001101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 5

Entering cache lookup

Pattern:
************************************************
Candidate: 011001
************************************************

Match:
************************************************
Candidate: 011001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 011001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 101010
************************************************

Match:
************************************************
Candidate: 101010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 101000
************************************************

Match:
************************************************
Candidate: 101000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 100010
************************************************

Match:
************************************************
Candidate: 100010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 001110
************************************************

Match:
************************************************
Candidate: 001110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 001110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 010110
************************************************

Match:
************************************************
Candidate: 010110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 010110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before


************************************************
Generation 2(Before sorting)
************************************************
Candidate 1:  100101	Fitness value: 2532.715088
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  101100	Fitness value: 3777.499512
Candidate 4:  001101	Fitness value: 3797.288330
Candidate 5:  011001	Fitness value: 3821.488525
Candidate 6:  101010	Fitness value: 3821.849365
Candidate 7:  101000	Fitness value: 3958.718018
Candidate 8:  100010	Fitness value: 3976.985352
Candidate 9:  001110	Fitness value: 5071.697754
Candidate 10:  010110	Fitness value: 5075.697754
************************************************


************************************************
Generation 2(After sorting)
************************************************
Candidate 1:  100101	Fitness value: 2532.715088
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  101100	Fitness value: 3777.499512
Candidate 4:  001101	Fitness value: 3797.288330
Candidate 5:  011001	Fitness value: 3821.488525
Candidate 6:  101010	Fitness value: 3821.849365
Candidate 7:  101000	Fitness value: 3958.718018
Candidate 8:  100010	Fitness value: 3976.985352
Candidate 9:  001110	Fitness value: 5071.697754
Candidate 10:  010110	Fitness value: 5075.697754
************************************************

Entering crossover function

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 22.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 5

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 3

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 38.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Exiting crossover function


************************************************
Children generated after crossover for Generation 2
************************************************
Candidate 1: 100100
Candidate 2: 011000
Candidate 3: 000110
************************************************

Entering mutation routine

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Mutation successfully done for candidate 1 in the pool of children

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 38.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Mutation successfully done for candidate 3 in the pool of children

Exiting mutation routine


************************************************
Children generated after mutation for Generation 2
************************************************
Candidate 1: 101100
Candidate 2: 011000
Candidate 3: 010110
************************************************
Iteration(Generation): 2, Child no: 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1589 rows         1597 cols         3194 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        369.032051      D     81     0        .000000     0
   438       2061.012086      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  438 simplex iterations in 0s

Final objective                         : 2.061012086191868e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2061.012086

Entering candidate fitness function

Candidate fitness: 3777.499512

Exiting candidate fitness function


************************************************
Iteration 2 results:
************************************************
Candidate: 101100
************************************************
Fitness: 3777.499512
************************************************
Iteration(Generation): 2, Child no: 2

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1538 (      0 spare) rows
        1539 (      0 spare) structural columns
        3088 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1538 rows         1539 cols         3088 elements
Presolved problem has:
      1509 rows         1516 cols         3032 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        719.030502      D    160     0        .000000     0
   477       2446.511586      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  477 simplex iterations in 0s

Final objective                         : 2.446511585929817e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2446.511586

Entering candidate fitness function

Candidate fitness: 5219.005371

Exiting candidate fitness function


************************************************
Iteration 2 results:
************************************************
Candidate: 011000
************************************************
Fitness: 5219.005371
************************************************
Iteration(Generation): 2, Child no: 3

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1588 rows         1596 cols         3192 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        738.032102      D    160     0        .000000     0
   440       2370.291681      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  440 simplex iterations in 0s

Final objective                         : 2.370291681416282e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2370.291681

Entering candidate fitness function

Candidate fitness: 5075.697754

Exiting candidate fitness function


************************************************
Iteration 2 results:
************************************************
Candidate: 010110
************************************************
Fitness: 5075.697754
************************************************


************************************************
Children sorted after crossover and mutation for Generation 2
************************************************
Candidate 1:  101100	Fitness value: 3777.499512
Candidate 2:  010110	Fitness value: 5075.697754
Candidate 3:  011000	Fitness value: 5219.005371
************************************************

Status:  l = 10, k = 1, j = 9, pool_size = 3


Finished creating the next generation

Freed ga population

Genetic algorithm: Iteration 3


************************************************
Generation 3
************************************************
Candidate 1: 100101
Candidate 2: 100101
Candidate 3: 101100
Candidate 4: 101100
Candidate 5: 001101
Candidate 6: 011001
Candidate 7: 101010
Candidate 8: 101000
Candidate 9: 100010
Candidate 10: 001110
************************************************

Iteration 3: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 3

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 4

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 5

Entering cache lookup

Pattern:
************************************************
Candidate: 001101
************************************************

Match:
************************************************
Candidate: 001101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 001101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 011001
************************************************

Match:
************************************************
Candidate: 011001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 011001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 101010
************************************************

Match:
************************************************
Candidate: 101010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 101000
************************************************

Match:
************************************************
Candidate: 101000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 100010
************************************************

Match:
************************************************
Candidate: 100010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 001110
************************************************

Match:
************************************************
Candidate: 001110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 001110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before


************************************************
Generation 3(Before sorting)
************************************************
Candidate 1:  100101	Fitness value: 2532.715088
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  101100	Fitness value: 3777.499512
Candidate 4:  101100	Fitness value: 3777.499512
Candidate 5:  001101	Fitness value: 3797.288330
Candidate 6:  011001	Fitness value: 3821.488525
Candidate 7:  101010	Fitness value: 3821.849365
Candidate 8:  101000	Fitness value: 3958.718018
Candidate 9:  100010	Fitness value: 3976.985352
Candidate 10:  001110	Fitness value: 5071.697754
************************************************


************************************************
Generation 3(After sorting)
************************************************
Candidate 1:  100101	Fitness value: 2532.715088
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  101100	Fitness value: 3777.499512
Candidate 4:  101100	Fitness value: 3777.499512
Candidate 5:  001101	Fitness value: 3797.288330
Candidate 6:  011001	Fitness value: 3821.488525
Candidate 7:  101010	Fitness value: 3821.849365
Candidate 8:  101000	Fitness value: 3958.718018
Candidate 9:  100010	Fitness value: 3976.985352
Candidate 10:  001110	Fitness value: 5071.697754
************************************************

Entering crossover function

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 22.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 14.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Exiting crossover function


************************************************
Children generated after crossover for Generation 3
************************************************
Candidate 1: 100100
Candidate 2: 101101
Candidate 3: 100110
************************************************

Entering mutation routine

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Mutation successfully done for candidate 1 in the pool of children

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Mutation successfully done for candidate 3 in the pool of children

Exiting mutation routine


************************************************
Children generated after mutation for Generation 3
************************************************
Candidate 1: 101100
Candidate 2: 101101
Candidate 3: 110110
************************************************
Iteration(Generation): 3, Child no: 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1589 rows         1597 cols         3194 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        369.032051      D     81     0        .000000     0
   438       2061.012086      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  438 simplex iterations in 0s

Final objective                         : 2.061012086191868e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2061.012086

Entering candidate fitness function

Candidate fitness: 3777.499512

Exiting candidate fitness function


************************************************
Iteration 3 results:
************************************************
Candidate: 101100
************************************************
Fitness: 3777.499512
************************************************
Iteration(Generation): 3, Child no: 2

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1698 (      0 spare) rows
        1701 (      0 spare) structural columns
        3410 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1698 rows         1701 cols         3410 elements
Presolved problem has:
      1669 rows         1678 cols         3356 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         47.033600      D      2     0        .000000     0
   391       1740.402991      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  391 simplex iterations in 0s

Final objective                         : 1.740402990520635e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 1740.402991

Entering candidate fitness function

Candidate fitness: 2402.846680

Exiting candidate fitness function


************************************************
Iteration 3 results:
************************************************
Candidate: 101101
************************************************
Fitness: 2402.846680
************************************************
Iteration(Generation): 3, Child no: 3

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1698 (      0 spare) rows
        1701 (      0 spare) structural columns
        3410 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1698 rows         1701 cols         3410 elements
Presolved problem has:
      1668 rows         1677 cols         3354 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        385.033651      D     81     0        .000000     0
   403       1992.028764      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  403 simplex iterations in 0s

Final objective                         : 1.992028764360578e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 1992.028764

Entering candidate fitness function

Candidate fitness: 3669.375000

Exiting candidate fitness function


************************************************
Iteration 3 results:
************************************************
Candidate: 110110
************************************************
Fitness: 3669.375000
************************************************


************************************************
Children sorted after crossover and mutation for Generation 3
************************************************
Candidate 1:  101101	Fitness value: 2402.846680
Candidate 2:  110110	Fitness value: 3669.375000
Candidate 3:  101100	Fitness value: 3777.499512
************************************************

Status:  l = 7, k = 3, j = 4, pool_size = 3


Finished creating the next generation

Freed ga population

Genetic algorithm: Iteration 4


************************************************
Generation 4
************************************************
Candidate 1: 101101
Candidate 2: 100101
Candidate 3: 100101
Candidate 4: 110110
Candidate 5: 101100
Candidate 6: 101100
Candidate 7: 101100
Candidate 8: 001101
Candidate 9: 011001
Candidate 10: 101010
************************************************

Iteration 4: Candidate 1

Entering cache lookup

Exiting cache lookup

Cache miss. Will have to solve the TAP for this candidate

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1698 (      0 spare) rows
        1701 (      0 spare) structural columns
        3410 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1698 rows         1701 cols         3410 elements
Presolved problem has:
      1669 rows         1678 cols         3356 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         47.033600      D      2     0        .000000     0
   391       1740.402991      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  391 simplex iterations in 0s

Final objective                         : 1.740402990520635e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 6.400004
[1, 5] = 6.199998
[2, 3] = 0.600006
[2, 6] = 0.000000
[3, 4] = 0.000000
[3, 7] = 0.600006
[5, 6] = 3.400001
[5, 9] = 2.799998
[6, 10] = 0.000000
[6, 7] = 6.199998
[7, 11] = 0.000000
[7, 8] = 5.599999
[8, 12] = 5.599999
[11, 12] = 7.399997
[4, 8] = 0.000000
[9, 10] = 2.799998
[10, 11] = 2.799998
[1, 6] = 7.399997
[2, 7] = 5.799999
[6, 11] = 4.599999
[7, 12] = 7.000004

Objective value: 1740.402991

Entering candidate fitness function

Candidate fitness: 2402.846680

Exiting candidate fitness function


************************************************
Iteration 4 results:
************************************************
Candidate: 101101
************************************************
Fitness: 2402.846680
************************************************

Iteration 4: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 3

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 4

Entering cache lookup

Exiting cache lookup

Cache miss. Will have to solve the TAP for this candidate

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1698 (      0 spare) rows
        1701 (      0 spare) structural columns
        3410 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1698 rows         1701 cols         3410 elements
Presolved problem has:
      1668 rows         1677 cols         3354 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        385.033651      D     81     0        .000000     0
   403       1992.028764      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  403 simplex iterations in 0s

Final objective                         : 1.992028764360578e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 5.600005
[1, 5] = 6.599998
[2, 3] = 5.399995
[2, 6] = 0.200010
[3, 4] = 0.000000
[3, 7] = 0.000000
[5, 6] = 1.799993
[5, 9] = 0.000000
[6, 10] = 0.000000
[6, 7] = 4.600000
[7, 11] = 0.000000
[7, 8] = 4.600000
[8, 12] = 9.999995
[11, 12] = 10.000005
[4, 8] = 0.000000
[9, 10] = 0.000000
[10, 11] = 4.800005
[1, 6] = 7.799997
[5, 10] = 4.800005
[6, 11] = 5.199999
[3, 8] = 5.399995

Objective value: 1992.028764

Entering candidate fitness function

Candidate fitness: 3669.375000

Exiting candidate fitness function


************************************************
Iteration 4 results:
************************************************
Candidate: 110110
************************************************
Fitness: 3669.375000
************************************************

Iteration 4: Candidate 5

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 001101
************************************************

Match:
************************************************
Candidate: 001101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 001101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 011001
************************************************

Match:
************************************************
Candidate: 011001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 011001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 101010
************************************************

Match:
************************************************
Candidate: 101010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before


************************************************
Generation 4(Before sorting)
************************************************
Candidate 1:  101101	Fitness value: 2402.846680
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  100101	Fitness value: 2532.715088
Candidate 4:  110110	Fitness value: 3669.375000
Candidate 5:  101100	Fitness value: 3777.499512
Candidate 6:  101100	Fitness value: 3777.499512
Candidate 7:  101100	Fitness value: 3777.499512
Candidate 8:  001101	Fitness value: 3797.288330
Candidate 9:  011001	Fitness value: 3821.488525
Candidate 10:  101010	Fitness value: 3821.849365
************************************************


************************************************
Generation 4(After sorting)
************************************************
Candidate 1:  101101	Fitness value: 2402.846680
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  100101	Fitness value: 2532.715088
Candidate 4:  110110	Fitness value: 3669.375000
Candidate 5:  101100	Fitness value: 3777.499512
Candidate 6:  101100	Fitness value: 3777.499512
Candidate 7:  101100	Fitness value: 3777.499512
Candidate 8:  001101	Fitness value: 3797.288330
Candidate 9:  011001	Fitness value: 3821.488525
Candidate 10:  101010	Fitness value: 3821.849365
************************************************

Entering crossover function

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Exiting crossover function


************************************************
Children generated after crossover for Generation 4
************************************************
Candidate 1: 110100
Candidate 2: 001001
************************************************

Entering mutation routine

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Mutation successfully done for candidate 1 in the pool of children

Exiting mutation routine


************************************************
Children generated after mutation for Generation 4
************************************************
Candidate 1: 111100
Candidate 2: 001001
************************************************
Iteration(Generation): 4, Child no: 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1698 (      0 spare) rows
        1701 (      0 spare) structural columns
        3410 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1698 rows         1701 cols         3410 elements
Presolved problem has:
      1668 rows         1677 cols         3354 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        381.033651      D     81     0        .000000     0
   433       2043.297509      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  433 simplex iterations in 0s

Final objective                         : 2.043297509204933e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2043.297509

Entering candidate fitness function

Candidate fitness: 3748.919434

Exiting candidate fitness function


************************************************
Iteration 4 results:
************************************************
Candidate: 111100
************************************************
Fitness: 3748.919434
************************************************
Iteration(Generation): 4, Child no: 2

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1538 (      0 spare) rows
        1539 (      0 spare) structural columns
        3088 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1538 rows         1539 cols         3088 elements
Presolved problem has:
      1510 rows         1517 cols         3034 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        385.030451      D     81     0        .000000     0
   469       2130.383483      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  469 simplex iterations in 0s

Final objective                         : 2.130383483016132e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2130.383483

Entering candidate fitness function

Candidate fitness: 3877.165039

Exiting candidate fitness function


************************************************
Iteration 4 results:
************************************************
Candidate: 001001
************************************************
Fitness: 3877.165039
************************************************


************************************************
Children sorted after crossover and mutation for Generation 4
************************************************
Candidate 1:  111100	Fitness value: 3748.919434
Candidate 2:  001001	Fitness value: 3877.165039
************************************************

Status:  l = 10, k = 1, j = 9, pool_size = 2


Finished creating the next generation

Freed ga population

Genetic algorithm: Iteration 5


************************************************
Generation 5
************************************************
Candidate 1: 101101
Candidate 2: 100101
Candidate 3: 100101
Candidate 4: 110110
Candidate 5: 111100
Candidate 6: 101100
Candidate 7: 101100
Candidate 8: 101100
Candidate 9: 001101
Candidate 10: 011001
************************************************

Iteration 5: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 101101
************************************************

Match:
************************************************
Candidate: 101101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 3

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 4

Entering cache lookup

Pattern:
************************************************
Candidate: 110110
************************************************

Match:
************************************************
Candidate: 110110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 110110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 5

Entering cache lookup

Exiting cache lookup

Cache miss. Will have to solve the TAP for this candidate

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1698 (      0 spare) rows
        1701 (      0 spare) structural columns
        3410 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1698 rows         1701 cols         3410 elements
Presolved problem has:
      1668 rows         1677 cols         3354 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        381.033651      D     81     0        .000000     0
   433       2043.297509      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  433 simplex iterations in 0s

Final objective                         : 2.043297509204933e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 6.199998
[1, 5] = 6.200005
[2, 3] = 2.799998
[2, 6] = 0.000000
[3, 4] = 2.799998
[3, 7] = 0.000000
[5, 6] = 1.200005
[5, 9] = 0.000000
[6, 10] = 0.000000
[6, 7] = 3.599997
[7, 11] = 0.000000
[7, 8] = 6.999998
[8, 12] = 9.799995
[11, 12] = 10.200005
[4, 8] = 2.799998
[9, 10] = 0.000000
[10, 11] = 5.000000
[1, 6] = 7.599997
[5, 10] = 5.000000
[2, 7] = 3.400001
[6, 11] = 5.200005

Objective value: 2043.297509

Entering candidate fitness function

Candidate fitness: 3748.919434

Exiting candidate fitness function


************************************************
Iteration 5 results:
************************************************
Candidate: 111100
************************************************
Fitness: 3748.919434
************************************************

Iteration 5: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 001101
************************************************

Match:
************************************************
Candidate: 001101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 001101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 011001
************************************************

Match:
************************************************
Candidate: 011001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 011001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before


************************************************
Generation 5(Before sorting)
************************************************
Candidate 1:  101101	Fitness value: 2402.846680
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  100101	Fitness value: 2532.715088
Candidate 4:  110110	Fitness value: 3669.375000
Candidate 5:  111100	Fitness value: 3748.919434
Candidate 6:  101100	Fitness value: 3777.499512
Candidate 7:  101100	Fitness value: 3777.499512
Candidate 8:  101100	Fitness value: 3777.499512
Candidate 9:  001101	Fitness value: 3797.288330
Candidate 10:  011001	Fitness value: 3821.488525
************************************************


************************************************
Generation 5(After sorting)
************************************************
Candidate 1:  101101	Fitness value: 2402.846680
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  100101	Fitness value: 2532.715088
Candidate 4:  110110	Fitness value: 3669.375000
Candidate 5:  111100	Fitness value: 3748.919434
Candidate 6:  101100	Fitness value: 3777.499512
Candidate 7:  101100	Fitness value: 3777.499512
Candidate 8:  101100	Fitness value: 3777.499512
Candidate 9:  001101	Fitness value: 3797.288330
Candidate 10:  011001	Fitness value: 3821.488525
************************************************

Entering crossover function

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 4

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 37.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Exiting crossover function


************************************************
Children generated after crossover for Generation 5
************************************************
Candidate 1: 100110
Candidate 2: 001001
************************************************

Entering mutation routine

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Mutation successfully done for candidate 1 in the pool of children

Exiting mutation routine


************************************************
Children generated after mutation for Generation 5
************************************************
Candidate 1: 101110
Candidate 2: 001001
************************************************
Iteration(Generation): 5, Child no: 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1698 (      0 spare) rows
        1701 (      0 spare) structural columns
        3410 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1698 rows         1701 cols         3410 elements
Presolved problem has:
      1668 rows         1677 cols         3354 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        380.033651      D     81     0        .000000     0
   414       2006.139134      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  414 simplex iterations in 0s

Final objective                         : 2.006139133738826e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2006.139134

Entering candidate fitness function

Candidate fitness: 3636.927490

Exiting candidate fitness function


************************************************
Iteration 5 results:
************************************************
Candidate: 101110
************************************************
Fitness: 3636.927490
************************************************
Iteration(Generation): 5, Child no: 2

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1538 (      0 spare) rows
        1539 (      0 spare) structural columns
        3088 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1538 rows         1539 cols         3088 elements
Presolved problem has:
      1510 rows         1517 cols         3034 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        385.030451      D     81     0        .000000     0
   469       2130.383483      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  469 simplex iterations in 0s

Final objective                         : 2.130383483016132e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2130.383483

Entering candidate fitness function

Candidate fitness: 3877.165039

Exiting candidate fitness function


************************************************
Iteration 5 results:
************************************************
Candidate: 001001
************************************************
Fitness: 3877.165039
************************************************


************************************************
Children sorted after crossover and mutation for Generation 5
************************************************
Candidate 1:  101110	Fitness value: 3636.927490
Candidate 2:  001001	Fitness value: 3877.165039
************************************************

Status:  l = 10, k = 1, j = 9, pool_size = 2


Finished creating the next generation

Freed ga population

Genetic algorithm: Iteration 6


************************************************
Generation 6
************************************************
Candidate 1: 101101
Candidate 2: 100101
Candidate 3: 100101
Candidate 4: 101110
Candidate 5: 110110
Candidate 6: 111100
Candidate 7: 101100
Candidate 8: 101100
Candidate 9: 101100
Candidate 10: 001101
************************************************

Iteration 6: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 101101
************************************************

Match:
************************************************
Candidate: 101101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 3

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 4

Entering cache lookup

Exiting cache lookup

Cache miss. Will have to solve the TAP for this candidate

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1698 (      0 spare) rows
        1701 (      0 spare) structural columns
        3410 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1698 rows         1701 cols         3410 elements
Presolved problem has:
      1668 rows         1677 cols         3354 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        380.033651      D     81     0        .000000     0
   414       2006.139134      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  414 simplex iterations in 0s

Final objective                         : 2.006139133738826e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Travelers on link a
[1, 2] = 6.399998
[1, 5] = 6.199998
[2, 3] = 4.400000
[2, 6] = 0.000000
[3, 4] = 0.000000
[3, 7] = 0.000000
[5, 6] = 2.399998
[5, 9] = 3.800001
[6, 10] = 0.400002
[6, 7] = 3.600001
[7, 11] = 0.000000
[7, 8] = 5.599999
[8, 12] = 9.999999
[11, 12] = 10.000001
[4, 8] = 0.000000
[9, 10] = 3.800001
[10, 11] = 4.200002
[1, 6] = 7.400003
[2, 7] = 1.999998
[6, 11] = 5.799999
[3, 8] = 4.400000

Objective value: 2006.139134

Entering candidate fitness function

Candidate fitness: 3636.927490

Exiting candidate fitness function


************************************************
Iteration 6 results:
************************************************
Candidate: 101110
************************************************
Fitness: 3636.927490
************************************************

Iteration 6: Candidate 5

Entering cache lookup

Pattern:
************************************************
Candidate: 110110
************************************************

Match:
************************************************
Candidate: 110110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 110110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 111100
************************************************

Match:
************************************************
Candidate: 111100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 111100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 001101
************************************************

Match:
************************************************
Candidate: 001101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 001101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before


************************************************
Generation 6(Before sorting)
************************************************
Candidate 1:  101101	Fitness value: 2402.846680
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  100101	Fitness value: 2532.715088
Candidate 4:  101110	Fitness value: 3636.927490
Candidate 5:  110110	Fitness value: 3669.375000
Candidate 6:  111100	Fitness value: 3748.919434
Candidate 7:  101100	Fitness value: 3777.499512
Candidate 8:  101100	Fitness value: 3777.499512
Candidate 9:  101100	Fitness value: 3777.499512
Candidate 10:  001101	Fitness value: 3797.288330
************************************************


************************************************
Generation 6(After sorting)
************************************************
Candidate 1:  101101	Fitness value: 2402.846680
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  100101	Fitness value: 2532.715088
Candidate 4:  101110	Fitness value: 3636.927490
Candidate 5:  110110	Fitness value: 3669.375000
Candidate 6:  111100	Fitness value: 3748.919434
Candidate 7:  101100	Fitness value: 3777.499512
Candidate 8:  101100	Fitness value: 3777.499512
Candidate 9:  101100	Fitness value: 3777.499512
Candidate 10:  001101	Fitness value: 3797.288330
************************************************

Entering crossover function

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 47.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Exiting crossover function


************************************************
Children generated after crossover for Generation 6
************************************************
Candidate 1: 100110
************************************************

Entering mutation routine

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Mutation successfully done for candidate 1 in the pool of children

Exiting mutation routine


************************************************
Children generated after mutation for Generation 6
************************************************
Candidate 1: 101110
************************************************
Iteration(Generation): 6, Child no: 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1698 (      0 spare) rows
        1701 (      0 spare) structural columns
        3410 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1698 rows         1701 cols         3410 elements
Presolved problem has:
      1668 rows         1677 cols         3354 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        380.033651      D     81     0        .000000     0
   414       2006.139134      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  414 simplex iterations in 0s

Final objective                         : 2.006139133738826e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2006.139134

Entering candidate fitness function

Candidate fitness: 3636.927490

Exiting candidate fitness function


************************************************
Iteration 6 results:
************************************************
Candidate: 101110
************************************************
Fitness: 3636.927490
************************************************


************************************************
Children sorted after crossover and mutation for Generation 6
************************************************
Candidate 1:  101110	Fitness value: 3636.927490
************************************************

Status:  l = 5, k = 1, j = 4, pool_size = 1


Finished creating the next generation

Freed ga population

Genetic algorithm: Iteration 7


************************************************
Generation 7
************************************************
Candidate 1: 101101
Candidate 2: 100101
Candidate 3: 100101
Candidate 4: 101110
Candidate 5: 101110
Candidate 6: 110110
Candidate 7: 111100
Candidate 8: 101100
Candidate 9: 101100
Candidate 10: 101100
************************************************

Iteration 7: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 101101
************************************************

Match:
************************************************
Candidate: 101101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 7: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 7: Candidate 3

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 7: Candidate 4

Entering cache lookup

Pattern:
************************************************
Candidate: 101110
************************************************

Match:
************************************************
Candidate: 101110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 7: Candidate 5

Entering cache lookup

Pattern:
************************************************
Candidate: 101110
************************************************

Match:
************************************************
Candidate: 101110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 7: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 110110
************************************************

Match:
************************************************
Candidate: 110110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 110110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 7: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 111100
************************************************

Match:
************************************************
Candidate: 111100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 111100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 7: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 7: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 7: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before


************************************************
Generation 7(Before sorting)
************************************************
Candidate 1:  101101	Fitness value: 2402.846680
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  100101	Fitness value: 2532.715088
Candidate 4:  101110	Fitness value: 3636.927490
Candidate 5:  101110	Fitness value: 3636.927490
Candidate 6:  110110	Fitness value: 3669.375000
Candidate 7:  111100	Fitness value: 3748.919434
Candidate 8:  101100	Fitness value: 3777.499512
Candidate 9:  101100	Fitness value: 3777.499512
Candidate 10:  101100	Fitness value: 3777.499512
************************************************


************************************************
Generation 7(After sorting)
************************************************
Candidate 1:  101101	Fitness value: 2402.846680
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  100101	Fitness value: 2532.715088
Candidate 4:  101110	Fitness value: 3636.927490
Candidate 5:  101110	Fitness value: 3636.927490
Candidate 6:  110110	Fitness value: 3669.375000
Candidate 7:  111100	Fitness value: 3748.919434
Candidate 8:  101100	Fitness value: 3777.499512
Candidate 9:  101100	Fitness value: 3777.499512
Candidate 10:  101100	Fitness value: 3777.499512
************************************************

Entering crossover function

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Exiting crossover function


************************************************
Children generated after crossover for Generation 7
************************************************
Candidate 1: 100110
************************************************

Entering mutation routine

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Mutation successfully done for candidate 1 in the pool of children

Exiting mutation routine


************************************************
Children generated after mutation for Generation 7
************************************************
Candidate 1: 101110
************************************************
Iteration(Generation): 7, Child no: 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1698 (      0 spare) rows
        1701 (      0 spare) structural columns
        3410 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1698 rows         1701 cols         3410 elements
Presolved problem has:
      1668 rows         1677 cols         3354 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        380.033651      D     81     0        .000000     0
   414       2006.139134      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  414 simplex iterations in 0s

Final objective                         : 2.006139133738826e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2006.139134

Entering candidate fitness function

Candidate fitness: 3636.927490

Exiting candidate fitness function


************************************************
Iteration 7 results:
************************************************
Candidate: 101110
************************************************
Fitness: 3636.927490
************************************************


************************************************
Children sorted after crossover and mutation for Generation 7
************************************************
Candidate 1:  101110	Fitness value: 3636.927490
************************************************

Status:  l = 6, k = 1, j = 5, pool_size = 1


Finished creating the next generation

Freed ga population

Genetic algorithm: Iteration 8


************************************************
Generation 8
************************************************
Candidate 1: 101101
Candidate 2: 100101
Candidate 3: 100101
Candidate 4: 101110
Candidate 5: 101110
Candidate 6: 101110
Candidate 7: 110110
Candidate 8: 111100
Candidate 9: 101100
Candidate 10: 101100
************************************************

Iteration 8: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 101101
************************************************

Match:
************************************************
Candidate: 101101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 8: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 8: Candidate 3

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 8: Candidate 4

Entering cache lookup

Pattern:
************************************************
Candidate: 101110
************************************************

Match:
************************************************
Candidate: 101110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 8: Candidate 5

Entering cache lookup

Pattern:
************************************************
Candidate: 101110
************************************************

Match:
************************************************
Candidate: 101110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 8: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 101110
************************************************

Match:
************************************************
Candidate: 101110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 8: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 110110
************************************************

Match:
************************************************
Candidate: 110110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 110110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 8: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 111100
************************************************

Match:
************************************************
Candidate: 111100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 111100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 8: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 8: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before


************************************************
Generation 8(Before sorting)
************************************************
Candidate 1:  101101	Fitness value: 2402.846680
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  100101	Fitness value: 2532.715088
Candidate 4:  101110	Fitness value: 3636.927490
Candidate 5:  101110	Fitness value: 3636.927490
Candidate 6:  101110	Fitness value: 3636.927490
Candidate 7:  110110	Fitness value: 3669.375000
Candidate 8:  111100	Fitness value: 3748.919434
Candidate 9:  101100	Fitness value: 3777.499512
Candidate 10:  101100	Fitness value: 3777.499512
************************************************


************************************************
Generation 8(After sorting)
************************************************
Candidate 1:  101101	Fitness value: 2402.846680
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  100101	Fitness value: 2532.715088
Candidate 4:  101110	Fitness value: 3636.927490
Candidate 5:  101110	Fitness value: 3636.927490
Candidate 6:  101110	Fitness value: 3636.927490
Candidate 7:  110110	Fitness value: 3669.375000
Candidate 8:  111100	Fitness value: 3748.919434
Candidate 9:  101100	Fitness value: 3777.499512
Candidate 10:  101100	Fitness value: 3777.499512
************************************************

Entering crossover function

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 33.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 29.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Exiting crossover function


************************************************
Children generated after crossover for Generation 8
************************************************
Candidate 1: 100110
Candidate 2: 110100
************************************************

Entering mutation routine

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Mutation successfully done for candidate 1 in the pool of children

Exiting mutation routine


************************************************
Children generated after mutation for Generation 8
************************************************
Candidate 1: 101110
Candidate 2: 110100
************************************************
Iteration(Generation): 8, Child no: 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1698 (      0 spare) rows
        1701 (      0 spare) structural columns
        3410 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1698 rows         1701 cols         3410 elements
Presolved problem has:
      1668 rows         1677 cols         3354 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        380.033651      D     81     0        .000000     0
   414       2006.139134      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  414 simplex iterations in 0s

Final objective                         : 2.006139133738826e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2006.139134

Entering candidate fitness function

Candidate fitness: 3636.927490

Exiting candidate fitness function


************************************************
Iteration 8 results:
************************************************
Candidate: 101110
************************************************
Fitness: 3636.927490
************************************************
Iteration(Generation): 8, Child no: 2

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 5	2 3	2 6	3 4	3 7	4 8	5 6	5 9	6 7	6 10	7 8	7 11	8 12	9 10	10 11	11 12	
Reading Problem TAP
Problem Statistics
        1618 (      0 spare) rows
        1620 (      0 spare) structural columns
        3249 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
      1618 rows         1620 cols         3249 elements
Presolved problem has:
      1589 rows         1597 cols         3194 elements
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0        374.032051      D     81     0        .000000     0
   432       2065.031062      D      0     0        .000000     0
Uncrunching matrix
Optimal solution found
Dual solved problem
  432 simplex iterations in 0s

Final objective                         : 2.065031062498194e+03
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) :       0.0 /       0.0
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 2065.031062

Entering candidate fitness function

Candidate fitness: 3784.594482

Exiting candidate fitness function


************************************************
Iteration 8 results:
************************************************
Candidate: 110100
************************************************
Fitness: 3784.594482
************************************************


************************************************
Children sorted after crossover and mutation for Generation 8
************************************************
Candidate 1:  101110	Fitness value: 3636.927490
Candidate 2:  110100	Fitness value: 3784.594482
************************************************

Status:  l = 10, k = 1, j = 9, pool_size = 2


Finished creating the next generation

Freed ga population

Genetic algorithm: Iteration 9


************************************************
Generation 9
************************************************
Candidate 1: 101101
Candidate 2: 100101
Candidate 3: 100101
Candidate 4: 101110
Candidate 5: 101110
Candidate 6: 101110
Candidate 7: 101110
Candidate 8: 110110
Candidate 9: 111100
Candidate 10: 101100
************************************************

Iteration 9: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 101101
************************************************

Match:
************************************************
Candidate: 101101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 9: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 9: Candidate 3

Entering cache lookup

Pattern:
************************************************
Candidate: 100101
************************************************

Match:
************************************************
Candidate: 100101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 100101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 9: Candidate 4

Entering cache lookup

Pattern:
************************************************
Candidate: 101110
************************************************

Match:
************************************************
Candidate: 101110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 9: Candidate 5

Entering cache lookup

Pattern:
************************************************
Candidate: 101110
************************************************

Match:
************************************************
Candidate: 101110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 9: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 101110
************************************************

Match:
************************************************
Candidate: 101110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 9: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 101110
************************************************

Match:
************************************************
Candidate: 101110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 9: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 110110
************************************************

Match:
************************************************
Candidate: 110110
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 110110
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 9: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 111100
************************************************

Match:
************************************************
Candidate: 111100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 111100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 9: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 101100
************************************************

Match:
************************************************
Candidate: 101100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 101100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before


************************************************
Generation 9(Before sorting)
************************************************
Candidate 1:  101101	Fitness value: 2402.846680
Candidate 2:  100101	Fitness value: 2532.715088
Candidate 3:  100101	Fitness value: 2532.715088
Candidate 4:  101110	Fitness value: 3636.927490
Candidate 5:  101110	Fitness value: 3636.927490
Candidate 6:  101110	Fitness value: 3636.927490
Candidate 7:  101110	Fitness value: 3636.927490
Candidate 8:  110110	Fitness value: 3669.375000
Candidate 9:  111100	Fitness value: 3748.919434
Candidate 10:  101100	Fitness value: 3777.499512
************************************************

Genetic algorithm terminates because the objective function value has remained the same for a long time

Final objective value for DNDP is 2402.846680
