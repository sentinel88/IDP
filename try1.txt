
WARNING:  Please remember to change the settings for low budget problems to avoid getting stuck in an infinite loop. For low budget problems check_duplicate function is not a good idea as there are few feasible candidates in problems for low budget and one cannot avoid duplicates


Inside parse function

Reading from data file started

Partial parsing finished

13 14 6.000000 15.000000

14 13 6.000000 15.000000

11 15 5.000000 10.000000

15 11 5.000000 10.000000

22 19 5.000000 10.000000

19 22 5.000000 10.000000

9 11 4.000000 10.000000

11 9 4.000000 10.000000

7 16 4.000000 10.000000

16 7 4.000000 10.000000

Printing network data

[1,1]:0.00 0.00	[1,2]:100.00 6.00	[1,3]:100.00 4.00	[1,4]:500.00 0.00	[1,5]:200.00 0.00	[1,6]:300.00 0.00	[1,7]:500.00 0.00	[1,8]:800.00 0.00	[1,9]:500.00 0.00	[1,10]:1300.00 0.00	[1,11]:500.00 0.00	[1,12]:200.00 0.00	[1,13]:500.00 0.00	[1,14]:300.00 0.00	[1,15]:500.00 0.00	[1,16]:500.00 0.00	[1,17]:400.00 0.00	[1,18]:100.00 0.00	[1,19]:300.00 0.00	[1,20]:300.00 0.00	[1,21]:100.00 0.00	[1,22]:400.00 0.00	[1,23]:300.00 0.00	[1,24]:100.00 0.00	
[2,1]:100.00 6.00	[2,2]:0.00 0.00	[2,3]:100.00 0.00	[2,4]:200.00 0.00	[2,5]:100.00 0.00	[2,6]:400.00 5.00	[2,7]:200.00 0.00	[2,8]:400.00 0.00	[2,9]:200.00 0.00	[2,10]:600.00 0.00	[2,11]:200.00 0.00	[2,12]:100.00 0.00	[2,13]:300.00 0.00	[2,14]:100.00 0.00	[2,15]:100.00 0.00	[2,16]:400.00 0.00	[2,17]:200.00 0.00	[2,18]:0.00 0.00	[2,19]:100.00 0.00	[2,20]:100.00 0.00	[2,21]:0.00 0.00	[2,22]:100.00 0.00	[2,23]:0.00 0.00	[2,24]:0.00 0.00	
[3,1]:100.00 4.00	[3,2]:100.00 0.00	[3,3]:0.00 0.00	[3,4]:200.00 4.00	[3,5]:100.00 0.00	[3,6]:300.00 0.00	[3,7]:100.00 0.00	[3,8]:200.00 0.00	[3,9]:100.00 0.00	[3,10]:300.00 0.00	[3,11]:300.00 0.00	[3,12]:200.00 4.00	[3,13]:100.00 0.00	[3,14]:100.00 0.00	[3,15]:100.00 0.00	[3,16]:200.00 0.00	[3,17]:100.00 0.00	[3,18]:0.00 0.00	[3,19]:0.00 0.00	[3,20]:0.00 0.00	[3,21]:0.00 0.00	[3,22]:100.00 0.00	[3,23]:100.00 0.00	[3,24]:0.00 0.00	
[4,1]:500.00 0.00	[4,2]:200.00 0.00	[4,3]:200.00 4.00	[4,4]:0.00 0.00	[4,5]:500.00 2.00	[4,6]:400.00 0.00	[4,7]:400.00 0.00	[4,8]:700.00 0.00	[4,9]:700.00 0.00	[4,10]:1200.00 0.00	[4,11]:1400.00 6.00	[4,12]:600.00 0.00	[4,13]:600.00 0.00	[4,14]:500.00 0.00	[4,15]:500.00 0.00	[4,16]:800.00 0.00	[4,17]:500.00 0.00	[4,18]:100.00 0.00	[4,19]:200.00 0.00	[4,20]:300.00 0.00	[4,21]:200.00 0.00	[4,22]:400.00 0.00	[4,23]:500.00 0.00	[4,24]:200.00 0.00	
[5,1]:200.00 0.00	[5,2]:100.00 0.00	[5,3]:100.00 0.00	[5,4]:500.00 2.00	[5,5]:0.00 0.00	[5,6]:200.00 4.00	[5,7]:200.00 0.00	[5,8]:500.00 0.00	[5,9]:800.00 5.00	[5,10]:1000.00 0.00	[5,11]:500.00 0.00	[5,12]:200.00 0.00	[5,13]:200.00 0.00	[5,14]:100.00 0.00	[5,15]:200.00 0.00	[5,16]:500.00 0.00	[5,17]:200.00 0.00	[5,18]:0.00 0.00	[5,19]:100.00 0.00	[5,20]:100.00 0.00	[5,21]:100.00 0.00	[5,22]:200.00 0.00	[5,23]:100.00 0.00	[5,24]:0.00 0.00	
[6,1]:300.00 0.00	[6,2]:400.00 5.00	[6,3]:300.00 0.00	[6,4]:400.00 0.00	[6,5]:200.00 4.00	[6,6]:0.00 0.00	[6,7]:400.00 0.00	[6,8]:800.00 2.00	[6,9]:400.00 0.00	[6,10]:800.00 0.00	[6,11]:400.00 0.00	[6,12]:200.00 0.00	[6,13]:200.00 0.00	[6,14]:100.00 0.00	[6,15]:200.00 0.00	[6,16]:900.00 0.00	[6,17]:500.00 0.00	[6,18]:100.00 0.00	[6,19]:200.00 0.00	[6,20]:300.00 0.00	[6,21]:100.00 0.00	[6,22]:200.00 0.00	[6,23]:100.00 0.00	[6,24]:100.00 0.00	
[7,1]:500.00 0.00	[7,2]:200.00 0.00	[7,3]:100.00 0.00	[7,4]:400.00 0.00	[7,5]:200.00 0.00	[7,6]:400.00 0.00	[7,7]:0.00 0.00	[7,8]:1000.00 3.00	[7,9]:600.00 0.00	[7,10]:1900.00 0.00	[7,11]:500.00 0.00	[7,12]:700.00 0.00	[7,13]:400.00 0.00	[7,14]:200.00 0.00	[7,15]:500.00 0.00	[7,16]:1400.00 4.00	[7,17]:1000.00 0.00	[7,18]:200.00 2.00	[7,19]:400.00 0.00	[7,20]:500.00 0.00	[7,21]:200.00 0.00	[7,22]:500.00 0.00	[7,23]:200.00 0.00	[7,24]:100.00 0.00	
[8,1]:800.00 0.00	[8,2]:400.00 0.00	[8,3]:200.00 0.00	[8,4]:700.00 0.00	[8,5]:500.00 0.00	[8,6]:800.00 2.00	[8,7]:1000.00 3.00	[8,8]:0.00 0.00	[8,9]:800.00 10.00	[8,10]:1600.00 0.00	[8,11]:800.00 0.00	[8,12]:600.00 0.00	[8,13]:600.00 0.00	[8,14]:400.00 0.00	[8,15]:600.00 0.00	[8,16]:2200.00 5.00	[8,17]:1400.00 0.00	[8,18]:300.00 0.00	[8,19]:700.00 0.00	[8,20]:900.00 0.00	[8,21]:400.00 0.00	[8,22]:500.00 0.00	[8,23]:300.00 0.00	[8,24]:200.00 0.00	
[9,1]:500.00 0.00	[9,2]:200.00 0.00	[9,3]:100.00 0.00	[9,4]:700.00 0.00	[9,5]:800.00 5.00	[9,6]:400.00 0.00	[9,7]:600.00 0.00	[9,8]:800.00 10.00	[9,9]:0.00 0.00	[9,10]:2800.00 3.00	[9,11]:1400.00 4.00	[9,12]:600.00 0.00	[9,13]:600.00 0.00	[9,14]:600.00 0.00	[9,15]:900.00 0.00	[9,16]:1400.00 0.00	[9,17]:900.00 0.00	[9,18]:200.00 0.00	[9,19]:400.00 0.00	[9,20]:600.00 0.00	[9,21]:300.00 0.00	[9,22]:700.00 0.00	[9,23]:500.00 0.00	[9,24]:200.00 0.00	
[10,1]:1300.00 0.00	[10,2]:600.00 0.00	[10,3]:300.00 0.00	[10,4]:1200.00 0.00	[10,5]:1000.00 0.00	[10,6]:800.00 0.00	[10,7]:1900.00 0.00	[10,8]:1600.00 0.00	[10,9]:2800.00 3.00	[10,10]:0.00 0.00	[10,11]:4000.00 5.00	[10,12]:2000.00 0.00	[10,13]:1900.00 0.00	[10,14]:2100.00 0.00	[10,15]:4000.00 6.00	[10,16]:4400.00 4.00	[10,17]:3900.00 8.00	[10,18]:700.00 0.00	[10,19]:1800.00 0.00	[10,20]:2500.00 0.00	[10,21]:1200.00 0.00	[10,22]:2600.00 0.00	[10,23]:1800.00 0.00	[10,24]:800.00 0.00	
[11,1]:500.00 0.00	[11,2]:200.00 0.00	[11,3]:300.00 0.00	[11,4]:1500.00 6.00	[11,5]:500.00 0.00	[11,6]:400.00 0.00	[11,7]:500.00 0.00	[11,8]:800.00 0.00	[11,9]:1400.00 4.00	[11,10]:3900.00 5.00	[11,11]:0.00 0.00	[11,12]:1400.00 6.00	[11,13]:1000.00 0.00	[11,14]:1600.00 4.00	[11,15]:1400.00 5.00	[11,16]:1400.00 0.00	[11,17]:1000.00 0.00	[11,18]:100.00 0.00	[11,19]:400.00 0.00	[11,20]:600.00 0.00	[11,21]:400.00 0.00	[11,22]:1100.00 0.00	[11,23]:1300.00 0.00	[11,24]:600.00 0.00	
[12,1]:200.00 0.00	[12,2]:100.00 0.00	[12,3]:200.00 4.00	[12,4]:600.00 0.00	[12,5]:200.00 0.00	[12,6]:200.00 0.00	[12,7]:700.00 0.00	[12,8]:600.00 0.00	[12,9]:600.00 0.00	[12,10]:2000.00 0.00	[12,11]:1400.00 6.00	[12,12]:0.00 0.00	[12,13]:1300.00 3.00	[12,14]:700.00 0.00	[12,15]:700.00 0.00	[12,16]:700.00 0.00	[12,17]:600.00 0.00	[12,18]:200.00 0.00	[12,19]:300.00 0.00	[12,20]:400.00 0.00	[12,21]:300.00 0.00	[12,22]:700.00 0.00	[12,23]:700.00 0.00	[12,24]:500.00 0.00	
[13,1]:500.00 0.00	[13,2]:300.00 0.00	[13,3]:100.00 0.00	[13,4]:600.00 0.00	[13,5]:200.00 0.00	[13,6]:200.00 0.00	[13,7]:400.00 0.00	[13,8]:600.00 0.00	[13,9]:600.00 0.00	[13,10]:1900.00 0.00	[13,11]:1000.00 0.00	[13,12]:1300.00 3.00	[13,13]:0.00 0.00	[13,14]:600.00 6.00	[13,15]:700.00 0.00	[13,16]:600.00 0.00	[13,17]:500.00 0.00	[13,18]:100.00 0.00	[13,19]:300.00 0.00	[13,20]:600.00 0.00	[13,21]:600.00 0.00	[13,22]:1300.00 0.00	[13,23]:800.00 0.00	[13,24]:800.00 4.00	
[14,1]:300.00 0.00	[14,2]:100.00 0.00	[14,3]:100.00 0.00	[14,4]:500.00 0.00	[14,5]:100.00 0.00	[14,6]:100.00 0.00	[14,7]:200.00 0.00	[14,8]:400.00 0.00	[14,9]:600.00 0.00	[14,10]:2100.00 0.00	[14,11]:1600.00 4.00	[14,12]:700.00 0.00	[14,13]:600.00 6.00	[14,14]:0.00 0.00	[14,15]:1300.00 5.00	[14,16]:700.00 0.00	[14,17]:700.00 0.00	[14,18]:100.00 0.00	[14,19]:300.00 0.00	[14,20]:500.00 0.00	[14,21]:400.00 0.00	[14,22]:1200.00 0.00	[14,23]:1100.00 4.00	[14,24]:400.00 0.00	
[15,1]:500.00 0.00	[15,2]:100.00 0.00	[15,3]:100.00 0.00	[15,4]:500.00 0.00	[15,5]:200.00 0.00	[15,6]:200.00 0.00	[15,7]:500.00 0.00	[15,8]:600.00 0.00	[15,9]:1000.00 0.00	[15,10]:4000.00 6.00	[15,11]:1400.00 5.00	[15,12]:700.00 0.00	[15,13]:700.00 0.00	[15,14]:1300.00 5.00	[15,15]:0.00 0.00	[15,16]:1200.00 0.00	[15,17]:1500.00 0.00	[15,18]:200.00 0.00	[15,19]:800.00 3.00	[15,20]:1100.00 0.00	[15,21]:800.00 0.00	[15,22]:2600.00 3.00	[15,23]:1000.00 0.00	[15,24]:400.00 0.00	
[16,1]:500.00 0.00	[16,2]:400.00 0.00	[16,3]:200.00 0.00	[16,4]:800.00 0.00	[16,5]:500.00 0.00	[16,6]:900.00 0.00	[16,7]:1400.00 4.00	[16,8]:2200.00 5.00	[16,9]:1400.00 0.00	[16,10]:4400.00 4.00	[16,11]:1400.00 0.00	[16,12]:700.00 0.00	[16,13]:600.00 0.00	[16,14]:700.00 0.00	[16,15]:1200.00 0.00	[16,16]:0.00 0.00	[16,17]:2800.00 2.00	[16,18]:500.00 3.00	[16,19]:1300.00 0.00	[16,20]:1600.00 0.00	[16,21]:600.00 0.00	[16,22]:1200.00 0.00	[16,23]:500.00 0.00	[16,24]:300.00 0.00	
[17,1]:400.00 0.00	[17,2]:200.00 0.00	[17,3]:100.00 0.00	[17,4]:500.00 0.00	[17,5]:200.00 0.00	[17,6]:500.00 0.00	[17,7]:1000.00 0.00	[17,8]:1400.00 0.00	[17,9]:900.00 0.00	[17,10]:3900.00 8.00	[17,11]:1000.00 0.00	[17,12]:600.00 0.00	[17,13]:500.00 0.00	[17,14]:700.00 0.00	[17,15]:1500.00 0.00	[17,16]:2800.00 2.00	[17,17]:0.00 0.00	[17,18]:600.00 0.00	[17,19]:1700.00 2.00	[17,20]:1700.00 0.00	[17,21]:600.00 0.00	[17,22]:1700.00 0.00	[17,23]:600.00 0.00	[17,24]:300.00 0.00	
[18,1]:100.00 0.00	[18,2]:0.00 0.00	[18,3]:0.00 0.00	[18,4]:100.00 0.00	[18,5]:0.00 0.00	[18,6]:100.00 0.00	[18,7]:200.00 2.00	[18,8]:300.00 0.00	[18,9]:200.00 0.00	[18,10]:700.00 0.00	[18,11]:200.00 0.00	[18,12]:200.00 0.00	[18,13]:100.00 0.00	[18,14]:100.00 0.00	[18,15]:200.00 0.00	[18,16]:500.00 3.00	[18,17]:600.00 0.00	[18,18]:0.00 0.00	[18,19]:300.00 0.00	[18,20]:400.00 4.00	[18,21]:100.00 0.00	[18,22]:300.00 0.00	[18,23]:100.00 0.00	[18,24]:0.00 0.00	
[19,1]:300.00 0.00	[19,2]:100.00 0.00	[19,3]:0.00 0.00	[19,4]:200.00 0.00	[19,5]:100.00 0.00	[19,6]:200.00 0.00	[19,7]:400.00 0.00	[19,8]:700.00 0.00	[19,9]:400.00 0.00	[19,10]:1800.00 0.00	[19,11]:400.00 0.00	[19,12]:300.00 0.00	[19,13]:300.00 0.00	[19,14]:300.00 0.00	[19,15]:800.00 3.00	[19,16]:1300.00 0.00	[19,17]:1700.00 2.00	[19,18]:300.00 0.00	[19,19]:0.00 0.00	[19,20]:1200.00 4.00	[19,21]:400.00 0.00	[19,22]:1200.00 5.00	[19,23]:300.00 0.00	[19,24]:100.00 0.00	
[20,1]:300.00 0.00	[20,2]:100.00 0.00	[20,3]:0.00 0.00	[20,4]:300.00 0.00	[20,5]:100.00 0.00	[20,6]:300.00 0.00	[20,7]:500.00 0.00	[20,8]:900.00 0.00	[20,9]:600.00 0.00	[20,10]:2500.00 0.00	[20,11]:600.00 0.00	[20,12]:500.00 0.00	[20,13]:600.00 0.00	[20,14]:500.00 0.00	[20,15]:1100.00 0.00	[20,16]:1600.00 0.00	[20,17]:1700.00 0.00	[20,18]:400.00 4.00	[20,19]:1200.00 4.00	[20,20]:0.00 0.00	[20,21]:1200.00 6.00	[20,22]:2400.00 5.00	[20,23]:700.00 0.00	[20,24]:400.00 0.00	
[21,1]:100.00 0.00	[21,2]:0.00 0.00	[21,3]:0.00 0.00	[21,4]:200.00 0.00	[21,5]:100.00 0.00	[21,6]:100.00 0.00	[21,7]:200.00 0.00	[21,8]:400.00 0.00	[21,9]:300.00 0.00	[21,10]:1200.00 0.00	[21,11]:400.00 0.00	[21,12]:300.00 0.00	[21,13]:600.00 0.00	[21,14]:400.00 0.00	[21,15]:800.00 0.00	[21,16]:600.00 0.00	[21,17]:600.00 0.00	[21,18]:100.00 0.00	[21,19]:400.00 0.00	[21,20]:1200.00 6.00	[21,21]:0.00 0.00	[21,22]:1800.00 2.00	[21,23]:700.00 0.00	[21,24]:500.00 3.00	
[22,1]:400.00 0.00	[22,2]:100.00 0.00	[22,3]:100.00 0.00	[22,4]:400.00 0.00	[22,5]:200.00 0.00	[22,6]:200.00 0.00	[22,7]:500.00 0.00	[22,8]:500.00 0.00	[22,9]:700.00 0.00	[22,10]:2600.00 0.00	[22,11]:1100.00 0.00	[22,12]:700.00 0.00	[22,13]:1300.00 0.00	[22,14]:1200.00 0.00	[22,15]:2600.00 3.00	[22,16]:1200.00 0.00	[22,17]:1700.00 0.00	[22,18]:300.00 0.00	[22,19]:1200.00 5.00	[22,20]:2400.00 5.00	[22,21]:1800.00 2.00	[22,22]:0.00 0.00	[22,23]:2100.00 4.00	[22,24]:1100.00 0.00	
[23,1]:300.00 0.00	[23,2]:0.00 0.00	[23,3]:100.00 0.00	[23,4]:500.00 0.00	[23,5]:100.00 0.00	[23,6]:100.00 0.00	[23,7]:200.00 0.00	[23,8]:300.00 0.00	[23,9]:500.00 0.00	[23,10]:1800.00 0.00	[23,11]:1300.00 0.00	[23,12]:700.00 0.00	[23,13]:800.00 0.00	[23,14]:1100.00 4.00	[23,15]:1000.00 0.00	[23,16]:500.00 0.00	[23,17]:600.00 0.00	[23,18]:100.00 0.00	[23,19]:300.00 0.00	[23,20]:700.00 0.00	[23,21]:700.00 0.00	[23,22]:2100.00 4.00	[23,23]:0.00 0.00	[23,24]:700.00 2.00	
[24,1]:100.00 0.00	[24,2]:0.00 0.00	[24,3]:0.00 0.00	[24,4]:200.00 0.00	[24,5]:0.00 0.00	[24,6]:100.00 0.00	[24,7]:100.00 0.00	[24,8]:200.00 0.00	[24,9]:200.00 0.00	[24,10]:800.00 0.00	[24,11]:600.00 0.00	[24,12]:500.00 0.00	[24,13]:700.00 4.00	[24,14]:400.00 0.00	[24,15]:400.00 0.00	[24,16]:300.00 0.00	[24,17]:300.00 0.00	[24,18]:0.00 0.00	[24,19]:100.00 0.00	[24,20]:400.00 0.00	[24,21]:500.00 3.00	[24,22]:1100.00 0.00	[24,23]:700.00 2.00	[24,24]:0.00 0.00	
Exiting parse function

Entering generate_rand

Entering encode_ga_cand
1 0 0 0 1 0 1 0 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 13, term: 14
 0, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 1, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 45.000000

Exiting feasiblity

Entering encode_ga_cand
1 1 1 1 1 1 0 0 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 1, orig: 11, term: 15
 1, orig: 15, term: 11
 1, orig: 22, term: 19
 1, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 1, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 80.000000

Not feasible

Entering encode_ga_cand
0 1 1 1 0 0 1 0 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 1, orig: 11, term: 15
 1, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 55.000000

Not feasible

Entering encode_ga_cand
1 1 1 0 0 1 1 0 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 1, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 1, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 80.000000

Not feasible

Entering encode_ga_cand
0 1 0 1 1 1 0 0 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 1, orig: 15, term: 11
 1, orig: 22, term: 19
 1, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 55.000000

Not feasible

Entering encode_ga_cand
1 1 1 0 1 0 0 1 0 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 70.000000

Not feasible

Entering encode_ga_cand
0 0 1 0 0 1 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 13, term: 14
 0, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 1, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 30.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 1 1 0 0 0 1 1 0 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 0 0 0 1 1 0 1 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 13, term: 14
 0, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 1, orig: 19, term: 22
 0, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 0 1 0 1 1 0 1 1 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 13, term: 14
 0, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 1, orig: 19, term: 22
 0, orig: 9, term: 11
 1, orig: 11, term: 9
 1, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 60.000000

Not feasible

Entering encode_ga_cand
0 0 1 0 1 1 0 0 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 13, term: 14
 0, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 1, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 1 1 1 0 1 0 0 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 1, orig: 11, term: 15
 1, orig: 15, term: 11
 0, orig: 22, term: 19
 1, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 1, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 70.000000

Not feasible

Entering encode_ga_cand
0 1 1 0 0 0 0 0 1 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 1, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 35.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 1 0 1 1 0 1 0 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 1, orig: 15, term: 11
 1, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 1, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 80.000000

Not feasible

Entering encode_ga_cand
1 0 0 1 0 1 0 1 1 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 13, term: 14
 0, orig: 14, term: 13
 0, orig: 11, term: 15
 1, orig: 15, term: 11
 0, orig: 22, term: 19
 1, orig: 19, term: 22
 0, orig: 9, term: 11
 1, orig: 11, term: 9
 1, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 55.000000

Not feasible

Entering encode_ga_cand
1 0 1 1 0 0 0 1 0 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 13, term: 14
 0, orig: 14, term: 13
 1, orig: 11, term: 15
 1, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 55.000000

Not feasible

Entering encode_ga_cand
1 1 0 1 1 0 1 0 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 1, orig: 15, term: 11
 1, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 1, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 80.000000

Not feasible

Entering encode_ga_cand
1 1 0 1 1 0 1 0 0 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 1, orig: 15, term: 11
 1, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 70.000000

Not feasible

Entering encode_ga_cand
1 1 0 0 0 0 0 0 0 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 1 0 0 1 0 1 0 1 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 1, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 55.000000

Not feasible

Entering encode_ga_cand
0 1 0 0 1 0 0 0 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 35.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 1 0 0 0 0 1 1 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 1 0 0 0 0 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Exiting generate_rand

Genetic algorithm: Iteration 1


************************************************
Generation 1
************************************************
Candidate 1: 1000101010
Candidate 2: 0010011000
Candidate 3: 0110001100
Candidate 4: 1000110100
Candidate 5: 0010110001
Candidate 6: 0110000010
Candidate 7: 1100000001
Candidate 8: 0100100001
Candidate 9: 0100001101
Candidate 10: 0100001000
************************************************

Iteration 1: Candidate 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13806 rows        39626 cols       117733 elements
Crash basis containing 12 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         45.006400      D   1060     0        .000000     0
  9459       3957349.526      D    441     0        .000000     2
 12869       4232314.761      D    274     0        .000000     3
 13782       4242799.467      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13782 simplex iterations in 4s

Final objective                         : 4.242799467071907e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 5.329e-15 / 5.329e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242799.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 1000101010
************************************************
Fitness: 672.283142
************************************************

Iteration 1: Candidate 2

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15318 (      0 spare) rows
       43292 (      0 spare) structural columns
      131923 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15318 rows        43292 cols       131923 elements
Presolved problem has:
     13672 rows        38933 cols       115713 elements
Crash basis containing 14 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         30.004800      D   1058     0        .000000     0
  9421       3873362.402      D    466     0        .000000     2
 12884       4209445.329      D    363     0        .000000     3
 14511       4242784.465      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  14511 simplex iterations in 4s

Final objective                         : 4.242784465471907e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 5.329e-15 / 5.329e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242784.465472

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 0010011000
************************************************
Fitness: 672.283142
************************************************

Iteration 1: Candidate 3

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13745 rows        39526 cols       117456 elements
Crash basis containing 11 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         45.006400      D   1055     0        .000000     0
  9571       3881717.202      D    548     0        .000000     2
 13336       4230753.559      D    277     0        .000000     3
 14319       4242799.467      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  14319 simplex iterations in 4s

Final objective                         : 4.242799467071907e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 3.997e-15 / 3.997e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242799.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 0110001100
************************************************
Fitness: 672.283142
************************************************

Iteration 1: Candidate 4

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13745 rows        39528 cols       117462 elements
Crash basis containing 13 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         45.006400      D   1059     0        .000000     0
  9317       4074855.953      D    537     0        .000000     2
 12918       4242799.467      P      0     0        .000000     3
Uncrunching matrix
Optimal solution found
Dual solved problem
  12918 simplex iterations in 3s

Final objective                         : 4.242799467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242799.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 1000110100
************************************************
Fitness: 672.283142
************************************************

Iteration 1: Candidate 5

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13745 rows        39528 cols       117462 elements
Crash basis containing 13 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         40.006400      D   1059     0        .000000     0
  9393       4019897.345      D    431     0        .000000     2
 13015       4242794.467      P      0     0        .000000     3
Uncrunching matrix
Optimal solution found
Dual solved problem
  13015 simplex iterations in 3s

Final objective                         : 4.242794467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242794.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 0010110001
************************************************
Fitness: 672.283142
************************************************

Iteration 1: Candidate 6

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15318 (      0 spare) rows
       43292 (      0 spare) structural columns
      131923 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15318 rows        43292 cols       131923 elements
Presolved problem has:
     13794 rows        39130 cols       116258 elements
Crash basis containing 10 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         35.004800      D   1056     0        .000000     0
  9377       3925408.674      D    552     0        .000000     2
 13212       4236995.671      D    347     0        .000000     3
 13688       4242789.465      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13688 simplex iterations in 4s

Final objective                         : 4.242789465471908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 5.329e-15 / 5.329e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242789.465472

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 0110000010
************************************************
Fitness: 672.283142
************************************************

Iteration 1: Candidate 7

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15318 (      0 spare) rows
       43292 (      0 spare) structural columns
      131923 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15318 rows        43292 cols       131923 elements
Presolved problem has:
     13857 rows        39229 cols       116456 elements
Crash basis containing 9 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         40.004800      D   1057     0        .000000     0
  9226       3992043.123      D    510     0        .000000     2
 12584       4232506.656      D    352     0        .000000     3
 13449       4242794.465      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13449 simplex iterations in 4s

Final objective                         : 4.242794465471908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242794.465472

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 1100000001
************************************************
Fitness: 672.283142
************************************************

Iteration 1: Candidate 8

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15318 (      0 spare) rows
       43292 (      0 spare) structural columns
      131923 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15318 rows        43292 cols       131923 elements
Presolved problem has:
     13794 rows        39131 cols       116261 elements
Crash basis containing 10 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         35.004800      D   1056     0        .000000     0
  9065       3984779.217      D    527     0        .000000     2
 12419       4227967.719      D    364     0        .000000     3
 13287       4242789.465      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13287 simplex iterations in 4s

Final objective                         : 4.242789465471908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242789.465472

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 0100100001
************************************************
Fitness: 672.283142
************************************************

Iteration 1: Candidate 9

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13806 rows        39625 cols       117730 elements
Crash basis containing 10 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         45.006400      D   1056     0        .000000     0
  9203       3979153.466      D    465     0        .000000     2
 12793       4237934.843      D    237     0        .000000     3
 13397       4242799.467      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13397 simplex iterations in 4s

Final objective                         : 4.242799467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 5.329e-15 / 5.329e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242799.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 0100001101
************************************************
Fitness: 672.283142
************************************************

Iteration 1: Candidate 10

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15298 (      0 spare) rows
       42744 (      0 spare) structural columns
      130828 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15298 rows        42744 cols       130828 elements
Presolved problem has:
     13721 rows        38536 cols       114512 elements
Crash basis containing 11 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         25.003200      D   1055     0        .000000     0
  9432       3926417.862      D    597     0        .000000     2
 13074       4234548.660      D    252     0        .000000     3
 13756       4242779.464      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13756 simplex iterations in 4s

Final objective                         : 4.242779463871907e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242779.463872

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 0100001000
************************************************
Fitness: 672.283142
************************************************


************************************************
Generation 1(Before sorting)
************************************************
Candidate 1:  1000101010	Fitness value: 672.283142
Candidate 2:  0010011000	Fitness value: 672.283142
Candidate 3:  0110001100	Fitness value: 672.283142
Candidate 4:  1000110100	Fitness value: 672.283142
Candidate 5:  0010110001	Fitness value: 672.283142
Candidate 6:  0110000010	Fitness value: 672.283142
Candidate 7:  1100000001	Fitness value: 672.283142
Candidate 8:  0100100001	Fitness value: 672.283142
Candidate 9:  0100001101	Fitness value: 672.283142
Candidate 10:  0100001000	Fitness value: 672.283142
************************************************


************************************************
Generation 1(After sorting)
************************************************
Candidate 1:  1000101010	Fitness value: 672.283142
Candidate 2:  0010011000	Fitness value: 672.283142
Candidate 3:  0110001100	Fitness value: 672.283142
Candidate 4:  1000110100	Fitness value: 672.283142
Candidate 5:  0010110001	Fitness value: 672.283142
Candidate 6:  0110000010	Fitness value: 672.283142
Candidate 7:  1100000001	Fitness value: 672.283142
Candidate 8:  0100100001	Fitness value: 672.283142
Candidate 9:  0100001101	Fitness value: 672.283142
Candidate 10:  0100001000	Fitness value: 672.283142
************************************************

Entering crossover function

Crossover point is 1

Entering feasibility
1, orig: 13, term: 14
 0, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 1, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 2

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 1, orig: 19, term: 22
 0, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 3

Entering feasibility
0, orig: 13, term: 14
 0, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 1, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 20.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 4

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 50.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 5

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 6

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 7

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 8

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 35.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Exiting crossover function


************************************************
Children generated after crossover for Generation 1
************************************************
Candidate 1: 1010011000
Candidate 2: 0100110100
Candidate 3: 0010000010
Candidate 4: 1100100001
Candidate 5: 0100001100
************************************************

Entering mutation routine

Exiting mutation routine


************************************************
Children generated after mutation for Generation 1
************************************************
Candidate 1: 1010011000
Candidate 2: 0100110100
Candidate 3: 0010000010
Candidate 4: 1100100001
Candidate 5: 0100001100
************************************************
Iteration(Generation): 1, Child no: 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13745 rows        39527 cols       117459 elements
Crash basis containing 13 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         45.006400      D   1059     0        .000000     0
  9709       3774835.963      D    506     0        .000000     2
 13173       4200393.321      D    485     0        .000000     3
 14886       4242799.467      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  14886 simplex iterations in 4s

Final objective                         : 4.242799467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242799.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 1010011000
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 1, Child no: 2

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13745 rows        39528 cols       117462 elements
Crash basis containing 11 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         45.006400      D   1055     0        .000000     0
  9371       3987317.826      D    417     0        .000000     2
 13103       4241861.831      D    142     0        .000000     3
 13301       4242799.467      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13301 simplex iterations in 4s

Final objective                         : 4.242799467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 3.553e-15 / 3.553e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242799.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 0100110100
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 1, Child no: 3

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15298 (      0 spare) rows
       42744 (      0 spare) structural columns
      130828 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15298 rows        42744 cols       130828 elements
Presolved problem has:
     13721 rows        38536 cols       114512 elements
Crash basis containing 13 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         20.003200      D   1059     0        .000000     0
  9709       3698513.180      D    576     0        .000000     2
 13490       4156189.749      D    351     0        .000000     3
 15557       4242774.464      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  15557 simplex iterations in 4s

Final objective                         : 4.242774463871907e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 5.329e-15 / 5.329e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242774.463872

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 0010000010
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 1, Child no: 4

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13869 rows        39725 cols       117931 elements
Crash basis containing 9 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         50.006400      D   1057     0        .000000     0
  9616       3994960.249      D    394     0        .000000     2
 13004       4239483.924      D    220     0        .000000     3
 13447       4242804.467      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13447 simplex iterations in 4s

Final objective                         : 4.242804467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 5.329e-15 / 5.329e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242804.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 1100100001
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 1, Child no: 5

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15318 (      0 spare) rows
       43292 (      0 spare) structural columns
      131923 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15318 rows        43292 cols       131923 elements
Presolved problem has:
     13733 rows        39031 cols       115984 elements
Crash basis containing 11 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         35.004800      D   1055     0        .000000     0
  9193       3893221.525      D    524     0        .000000     2
 12637       4231168.518      D    450     0        .000000     3
 13401       4242789.465      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13401 simplex iterations in 4s

Final objective                         : 4.242789465471908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242789.465472

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 0100001100
************************************************
Fitness: 672.283142
************************************************


************************************************
Children sorted after crossover and mutation for Generation 1
************************************************
Candidate 1:  1010011000	Fitness value: 672.283142
Candidate 2:  0100110100	Fitness value: 672.283142
Candidate 3:  0010000010	Fitness value: 672.283142
Candidate 4:  1100100001	Fitness value: 672.283142
Candidate 5:  0100001100	Fitness value: 672.283142
************************************************

Status:  l = 10, k = 0, j = 10, pool_size = 5


Finished creating the next generation

Freed ga population

Genetic algorithm: Iteration 2


************************************************
Generation 2
************************************************
Candidate 1: 1000101010
Candidate 2: 0010011000
Candidate 3: 0110001100
Candidate 4: 1000110100
Candidate 5: 0010110001
Candidate 6: 0110000010
Candidate 7: 1100000001
Candidate 8: 0100100001
Candidate 9: 0100001101
Candidate 10: 0100001000
************************************************

Iteration 2: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 1000101010
************************************************

Match:
************************************************
Candidate: 1000101010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1000101010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 0010011000
************************************************

Match:
************************************************
Candidate: 0010011000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0010011000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 3

Entering cache lookup

Pattern:
************************************************
Candidate: 0110001100
************************************************

Match:
************************************************
Candidate: 0110001100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0110001100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 4

Entering cache lookup

Pattern:
************************************************
Candidate: 1000110100
************************************************

Match:
************************************************
Candidate: 1000110100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1000110100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 5

Entering cache lookup

Pattern:
************************************************
Candidate: 0010110001
************************************************

Match:
************************************************
Candidate: 0010110001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0010110001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 0110000010
************************************************

Match:
************************************************
Candidate: 0110000010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0110000010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 1100000001
************************************************

Match:
************************************************
Candidate: 1100000001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1100000001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 0100100001
************************************************

Match:
************************************************
Candidate: 0100100001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100100001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 0100001101
************************************************

Match:
************************************************
Candidate: 0100001101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100001101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 2: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 0100001000
************************************************

Match:
************************************************
Candidate: 0100001000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100001000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before


************************************************
Generation 2(Before sorting)
************************************************
Candidate 1:  1000101010	Fitness value: 672.283142
Candidate 2:  0010011000	Fitness value: 672.283142
Candidate 3:  0110001100	Fitness value: 672.283142
Candidate 4:  1000110100	Fitness value: 672.283142
Candidate 5:  0010110001	Fitness value: 672.283142
Candidate 6:  0110000010	Fitness value: 672.283142
Candidate 7:  1100000001	Fitness value: 672.283142
Candidate 8:  0100100001	Fitness value: 672.283142
Candidate 9:  0100001101	Fitness value: 672.283142
Candidate 10:  0100001000	Fitness value: 672.283142
************************************************


************************************************
Generation 2(After sorting)
************************************************
Candidate 1:  1000101010	Fitness value: 672.283142
Candidate 2:  0010011000	Fitness value: 672.283142
Candidate 3:  0110001100	Fitness value: 672.283142
Candidate 4:  1000110100	Fitness value: 672.283142
Candidate 5:  0010110001	Fitness value: 672.283142
Candidate 6:  0110000010	Fitness value: 672.283142
Candidate 7:  1100000001	Fitness value: 672.283142
Candidate 8:  0100100001	Fitness value: 672.283142
Candidate 9:  0100001101	Fitness value: 672.283142
Candidate 10:  0100001000	Fitness value: 672.283142
************************************************

Entering crossover function

Crossover point is 1

Entering feasibility
1, orig: 13, term: 14
 0, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 1, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 2

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 1, orig: 19, term: 22
 0, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 5

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 6

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 7

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 8

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 9

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 50.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 2

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 6

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 7

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Exiting crossover function


************************************************
Children generated after crossover for Generation 2
************************************************
Candidate 1: 1010011000
Candidate 2: 0100110100
Candidate 3: 1100100001
************************************************

Entering mutation routine

Exiting mutation routine


************************************************
Children generated after mutation for Generation 2
************************************************
Candidate 1: 1010011000
Candidate 2: 0100110100
Candidate 3: 1100100001
************************************************
Iteration(Generation): 2, Child no: 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13745 rows        39527 cols       117459 elements
Crash basis containing 13 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         45.006400      D   1059     0        .000000     0
  9709       3774835.963      D    506     0        .000000     2
 13173       4200393.321      D    485     0        .000000     3
 14886       4242799.467      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  14886 simplex iterations in 4s

Final objective                         : 4.242799467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242799.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 2 results:
************************************************
Candidate: 1010011000
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 2, Child no: 2

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13745 rows        39528 cols       117462 elements
Crash basis containing 11 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         45.006400      D   1055     0        .000000     0
  9371       3987317.826      D    417     0        .000000     2
 13103       4241861.831      D    142     0        .000000     3
 13301       4242799.467      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13301 simplex iterations in 4s

Final objective                         : 4.242799467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 3.553e-15 / 3.553e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242799.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 2 results:
************************************************
Candidate: 0100110100
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 2, Child no: 3

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13869 rows        39725 cols       117931 elements
Crash basis containing 9 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         50.006400      D   1057     0        .000000     0
  9616       3994960.249      D    394     0        .000000     2
 13004       4239483.924      D    220     0        .000000     3
 13447       4242804.467      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13447 simplex iterations in 4s

Final objective                         : 4.242804467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 5.329e-15 / 5.329e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242804.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 2 results:
************************************************
Candidate: 1100100001
************************************************
Fitness: 672.283142
************************************************


************************************************
Children sorted after crossover and mutation for Generation 2
************************************************
Candidate 1:  1010011000	Fitness value: 672.283142
Candidate 2:  0100110100	Fitness value: 672.283142
Candidate 3:  1100100001	Fitness value: 672.283142
************************************************

Status:  l = 10, k = 0, j = 10, pool_size = 3


Finished creating the next generation

Freed ga population

Genetic algorithm: Iteration 3


************************************************
Generation 3
************************************************
Candidate 1: 1000101010
Candidate 2: 0010011000
Candidate 3: 0110001100
Candidate 4: 1000110100
Candidate 5: 0010110001
Candidate 6: 0110000010
Candidate 7: 1100000001
Candidate 8: 0100100001
Candidate 9: 0100001101
Candidate 10: 0100001000
************************************************

Iteration 3: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 1000101010
************************************************

Match:
************************************************
Candidate: 1000101010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1000101010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 0010011000
************************************************

Match:
************************************************
Candidate: 0010011000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0010011000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 3

Entering cache lookup

Pattern:
************************************************
Candidate: 0110001100
************************************************

Match:
************************************************
Candidate: 0110001100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0110001100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 4

Entering cache lookup

Pattern:
************************************************
Candidate: 1000110100
************************************************

Match:
************************************************
Candidate: 1000110100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1000110100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 5

Entering cache lookup

Pattern:
************************************************
Candidate: 0010110001
************************************************

Match:
************************************************
Candidate: 0010110001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0010110001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 0110000010
************************************************

Match:
************************************************
Candidate: 0110000010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0110000010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 1100000001
************************************************

Match:
************************************************
Candidate: 1100000001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1100000001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 0100100001
************************************************

Match:
************************************************
Candidate: 0100100001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100100001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 0100001101
************************************************

Match:
************************************************
Candidate: 0100001101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100001101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 3: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 0100001000
************************************************

Match:
************************************************
Candidate: 0100001000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100001000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before


************************************************
Generation 3(Before sorting)
************************************************
Candidate 1:  1000101010	Fitness value: 672.283142
Candidate 2:  0010011000	Fitness value: 672.283142
Candidate 3:  0110001100	Fitness value: 672.283142
Candidate 4:  1000110100	Fitness value: 672.283142
Candidate 5:  0010110001	Fitness value: 672.283142
Candidate 6:  0110000010	Fitness value: 672.283142
Candidate 7:  1100000001	Fitness value: 672.283142
Candidate 8:  0100100001	Fitness value: 672.283142
Candidate 9:  0100001101	Fitness value: 672.283142
Candidate 10:  0100001000	Fitness value: 672.283142
************************************************


************************************************
Generation 3(After sorting)
************************************************
Candidate 1:  1000101010	Fitness value: 672.283142
Candidate 2:  0010011000	Fitness value: 672.283142
Candidate 3:  0110001100	Fitness value: 672.283142
Candidate 4:  1000110100	Fitness value: 672.283142
Candidate 5:  0010110001	Fitness value: 672.283142
Candidate 6:  0110000010	Fitness value: 672.283142
Candidate 7:  1100000001	Fitness value: 672.283142
Candidate 8:  0100100001	Fitness value: 672.283142
Candidate 9:  0100001101	Fitness value: 672.283142
Candidate 10:  0100001000	Fitness value: 672.283142
************************************************

Entering crossover function

Crossover point is 1

Entering feasibility
1, orig: 13, term: 14
 0, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 1, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 2

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 1, orig: 19, term: 22
 0, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 3

Entering feasibility
0, orig: 13, term: 14
 0, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 1, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 20.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 4

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 50.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 5

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 6

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 7

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 8

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 35.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Exiting crossover function


************************************************
Children generated after crossover for Generation 3
************************************************
Candidate 1: 1010011000
Candidate 2: 0100110100
Candidate 3: 0010000010
Candidate 4: 1100100001
Candidate 5: 0100001100
************************************************

Entering mutation routine

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Mutation successfully done for candidate 4 in the pool of children

Exiting mutation routine


************************************************
Children generated after mutation for Generation 3
************************************************
Candidate 1: 1010011000
Candidate 2: 0100110100
Candidate 3: 0010000010
Candidate 4: 1100000001
Candidate 5: 0100001100
************************************************
Iteration(Generation): 3, Child no: 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13745 rows        39527 cols       117459 elements
Crash basis containing 13 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         45.006400      D   1059     0        .000000     0
  9709       3774835.963      D    506     0        .000000     2
 13173       4200393.321      D    485     0        .000000     3
 14886       4242799.467      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  14886 simplex iterations in 4s

Final objective                         : 4.242799467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242799.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 3 results:
************************************************
Candidate: 1010011000
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 3, Child no: 2

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13745 rows        39528 cols       117462 elements
Crash basis containing 11 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         45.006400      D   1055     0        .000000     0
  9371       3987317.826      D    417     0        .000000     2
 13103       4241861.831      D    142     0        .000000     3
 13301       4242799.467      P      0     0        .000000     3
Uncrunching matrix
Optimal solution found
Dual solved problem
  13301 simplex iterations in 3s

Final objective                         : 4.242799467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 3.553e-15 / 3.553e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242799.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 3 results:
************************************************
Candidate: 0100110100
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 3, Child no: 3

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15298 (      0 spare) rows
       42744 (      0 spare) structural columns
      130828 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15298 rows        42744 cols       130828 elements
Presolved problem has:
     13721 rows        38536 cols       114512 elements
Crash basis containing 13 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         20.003200      D   1059     0        .000000     0
  9709       3698513.180      D    576     0        .000000     2
 13490       4156189.749      D    351     0        .000000     3
 15557       4242774.464      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  15557 simplex iterations in 4s

Final objective                         : 4.242774463871907e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 5.329e-15 / 5.329e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242774.463872

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 3 results:
************************************************
Candidate: 0010000010
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 3, Child no: 4

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15318 (      0 spare) rows
       43292 (      0 spare) structural columns
      131923 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15318 rows        43292 cols       131923 elements
Presolved problem has:
     13857 rows        39229 cols       116456 elements
Crash basis containing 9 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         40.004800      D   1057     0        .000000     0
  9226       3992043.123      D    510     0        .000000     2
 12584       4232506.656      D    352     0        .000000     3
 13449       4242794.465      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13449 simplex iterations in 4s

Final objective                         : 4.242794465471908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242794.465472

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 3 results:
************************************************
Candidate: 1100000001
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 3, Child no: 5

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15318 (      0 spare) rows
       43292 (      0 spare) structural columns
      131923 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15318 rows        43292 cols       131923 elements
Presolved problem has:
     13733 rows        39031 cols       115984 elements
Crash basis containing 11 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         35.004800      D   1055     0        .000000     0
  9193       3893221.525      D    524     0        .000000     2
 12637       4231168.518      D    450     0        .000000     3
 13401       4242789.465      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13401 simplex iterations in 4s

Final objective                         : 4.242789465471908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242789.465472

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 3 results:
************************************************
Candidate: 0100001100
************************************************
Fitness: 672.283142
************************************************


************************************************
Children sorted after crossover and mutation for Generation 3
************************************************
Candidate 1:  1010011000	Fitness value: 672.283142
Candidate 2:  0100110100	Fitness value: 672.283142
Candidate 3:  0010000010	Fitness value: 672.283142
Candidate 4:  1100000001	Fitness value: 672.283142
Candidate 5:  0100001100	Fitness value: 672.283142
************************************************

Status:  l = 10, k = 0, j = 10, pool_size = 5


Finished creating the next generation

Freed ga population

Genetic algorithm: Iteration 4


************************************************
Generation 4
************************************************
Candidate 1: 1000101010
Candidate 2: 0010011000
Candidate 3: 0110001100
Candidate 4: 1000110100
Candidate 5: 0010110001
Candidate 6: 0110000010
Candidate 7: 1100000001
Candidate 8: 0100100001
Candidate 9: 0100001101
Candidate 10: 0100001000
************************************************

Iteration 4: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 1000101010
************************************************

Match:
************************************************
Candidate: 1000101010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1000101010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 0010011000
************************************************

Match:
************************************************
Candidate: 0010011000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0010011000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 3

Entering cache lookup

Pattern:
************************************************
Candidate: 0110001100
************************************************

Match:
************************************************
Candidate: 0110001100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0110001100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 4

Entering cache lookup

Pattern:
************************************************
Candidate: 1000110100
************************************************

Match:
************************************************
Candidate: 1000110100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1000110100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 5

Entering cache lookup

Pattern:
************************************************
Candidate: 0010110001
************************************************

Match:
************************************************
Candidate: 0010110001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0010110001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 0110000010
************************************************

Match:
************************************************
Candidate: 0110000010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0110000010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 1100000001
************************************************

Match:
************************************************
Candidate: 1100000001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1100000001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 0100100001
************************************************

Match:
************************************************
Candidate: 0100100001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100100001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 0100001101
************************************************

Match:
************************************************
Candidate: 0100001101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100001101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 4: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 0100001000
************************************************

Match:
************************************************
Candidate: 0100001000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100001000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before


************************************************
Generation 4(Before sorting)
************************************************
Candidate 1:  1000101010	Fitness value: 672.283142
Candidate 2:  0010011000	Fitness value: 672.283142
Candidate 3:  0110001100	Fitness value: 672.283142
Candidate 4:  1000110100	Fitness value: 672.283142
Candidate 5:  0010110001	Fitness value: 672.283142
Candidate 6:  0110000010	Fitness value: 672.283142
Candidate 7:  1100000001	Fitness value: 672.283142
Candidate 8:  0100100001	Fitness value: 672.283142
Candidate 9:  0100001101	Fitness value: 672.283142
Candidate 10:  0100001000	Fitness value: 672.283142
************************************************


************************************************
Generation 4(After sorting)
************************************************
Candidate 1:  1000101010	Fitness value: 672.283142
Candidate 2:  0010011000	Fitness value: 672.283142
Candidate 3:  0110001100	Fitness value: 672.283142
Candidate 4:  1000110100	Fitness value: 672.283142
Candidate 5:  0010110001	Fitness value: 672.283142
Candidate 6:  0110000010	Fitness value: 672.283142
Candidate 7:  1100000001	Fitness value: 672.283142
Candidate 8:  0100100001	Fitness value: 672.283142
Candidate 9:  0100001101	Fitness value: 672.283142
Candidate 10:  0100001000	Fitness value: 672.283142
************************************************

Entering crossover function

Crossover point is 1

Entering feasibility
1, orig: 13, term: 14
 0, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 1, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 2

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 1, orig: 19, term: 22
 0, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 3

Entering feasibility
0, orig: 13, term: 14
 0, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 1, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 20.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 4

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 50.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 5

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 6

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 7

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 8

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 35.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Exiting crossover function


************************************************
Children generated after crossover for Generation 4
************************************************
Candidate 1: 1010011000
Candidate 2: 0100110100
Candidate 3: 0010000010
Candidate 4: 1100100001
Candidate 5: 0100001100
************************************************

Entering mutation routine

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 1, orig: 19, term: 22
 0, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 35.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Mutation successfully done for candidate 2 in the pool of children

Exiting mutation routine


************************************************
Children generated after mutation for Generation 4
************************************************
Candidate 1: 1010011000
Candidate 2: 0100010100
Candidate 3: 0010000010
Candidate 4: 1100100001
Candidate 5: 0100001100
************************************************
Iteration(Generation): 4, Child no: 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13745 rows        39527 cols       117459 elements
Crash basis containing 13 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         45.006400      D   1059     0        .000000     0
  9709       3774835.963      D    506     0        .000000     2
 13173       4200393.321      D    485     0        .000000     3
 14886       4242799.467      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  14886 simplex iterations in 4s

Final objective                         : 4.242799467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242799.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 4 results:
************************************************
Candidate: 1010011000
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 4, Child no: 2

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15318 (      0 spare) rows
       43292 (      0 spare) structural columns
      131923 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15318 rows        43292 cols       131923 elements
Presolved problem has:
     13733 rows        39032 cols       115987 elements
Crash basis containing 11 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         35.004800      D   1055     0        .000000     0
  9410       4051745.485      D    453     0        .000000     2
 12995       4242789.465      P      0     0        .000000     3
Uncrunching matrix
Optimal solution found
Dual solved problem
  12995 simplex iterations in 3s

Final objective                         : 4.242789465471907e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242789.465472

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 4 results:
************************************************
Candidate: 0100010100
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 4, Child no: 3

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15298 (      0 spare) rows
       42744 (      0 spare) structural columns
      130828 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15298 rows        42744 cols       130828 elements
Presolved problem has:
     13721 rows        38536 cols       114512 elements
Crash basis containing 13 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         20.003200      D   1059     0        .000000     0
  9709       3698513.180      D    576     0        .000000     2
 13490       4156189.749      D    351     0        .000000     3
 15557       4242774.464      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  15557 simplex iterations in 4s

Final objective                         : 4.242774463871907e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 5.329e-15 / 5.329e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242774.463872

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 4 results:
************************************************
Candidate: 0010000010
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 4, Child no: 4

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13869 rows        39725 cols       117931 elements
Crash basis containing 9 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         50.006400      D   1057     0        .000000     0
  9616       3994960.249      D    394     0        .000000     2
 13004       4239483.924      D    220     0        .000000     3
 13447       4242804.467      P      0     0        .000000     3
Uncrunching matrix
Optimal solution found
Dual solved problem
  13447 simplex iterations in 3s

Final objective                         : 4.242804467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 5.329e-15 / 5.329e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242804.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 4 results:
************************************************
Candidate: 1100100001
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 4, Child no: 5

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15318 (      0 spare) rows
       43292 (      0 spare) structural columns
      131923 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15318 rows        43292 cols       131923 elements
Presolved problem has:
     13733 rows        39031 cols       115984 elements
Crash basis containing 11 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         35.004800      D   1055     0        .000000     0
  9193       3893221.525      D    524     0        .000000     2
 12637       4231168.518      D    450     0        .000000     3
 13401       4242789.465      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13401 simplex iterations in 4s

Final objective                         : 4.242789465471908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242789.465472

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 4 results:
************************************************
Candidate: 0100001100
************************************************
Fitness: 672.283142
************************************************


************************************************
Children sorted after crossover and mutation for Generation 4
************************************************
Candidate 1:  1010011000	Fitness value: 672.283142
Candidate 2:  0100010100	Fitness value: 672.283142
Candidate 3:  0010000010	Fitness value: 672.283142
Candidate 4:  1100100001	Fitness value: 672.283142
Candidate 5:  0100001100	Fitness value: 672.283142
************************************************

Status:  l = 10, k = 0, j = 10, pool_size = 5


Finished creating the next generation

Freed ga population

Genetic algorithm: Iteration 5


************************************************
Generation 5
************************************************
Candidate 1: 1000101010
Candidate 2: 0010011000
Candidate 3: 0110001100
Candidate 4: 1000110100
Candidate 5: 0010110001
Candidate 6: 0110000010
Candidate 7: 1100000001
Candidate 8: 0100100001
Candidate 9: 0100001101
Candidate 10: 0100001000
************************************************

Iteration 5: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 1000101010
************************************************

Match:
************************************************
Candidate: 1000101010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1000101010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 0010011000
************************************************

Match:
************************************************
Candidate: 0010011000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0010011000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 3

Entering cache lookup

Pattern:
************************************************
Candidate: 0110001100
************************************************

Match:
************************************************
Candidate: 0110001100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0110001100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 4

Entering cache lookup

Pattern:
************************************************
Candidate: 1000110100
************************************************

Match:
************************************************
Candidate: 1000110100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1000110100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 5

Entering cache lookup

Pattern:
************************************************
Candidate: 0010110001
************************************************

Match:
************************************************
Candidate: 0010110001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0010110001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 0110000010
************************************************

Match:
************************************************
Candidate: 0110000010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0110000010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 1100000001
************************************************

Match:
************************************************
Candidate: 1100000001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1100000001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 0100100001
************************************************

Match:
************************************************
Candidate: 0100100001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100100001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 0100001101
************************************************

Match:
************************************************
Candidate: 0100001101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100001101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 5: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 0100001000
************************************************

Match:
************************************************
Candidate: 0100001000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100001000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before


************************************************
Generation 5(Before sorting)
************************************************
Candidate 1:  1000101010	Fitness value: 672.283142
Candidate 2:  0010011000	Fitness value: 672.283142
Candidate 3:  0110001100	Fitness value: 672.283142
Candidate 4:  1000110100	Fitness value: 672.283142
Candidate 5:  0010110001	Fitness value: 672.283142
Candidate 6:  0110000010	Fitness value: 672.283142
Candidate 7:  1100000001	Fitness value: 672.283142
Candidate 8:  0100100001	Fitness value: 672.283142
Candidate 9:  0100001101	Fitness value: 672.283142
Candidate 10:  0100001000	Fitness value: 672.283142
************************************************


************************************************
Generation 5(After sorting)
************************************************
Candidate 1:  1000101010	Fitness value: 672.283142
Candidate 2:  0010011000	Fitness value: 672.283142
Candidate 3:  0110001100	Fitness value: 672.283142
Candidate 4:  1000110100	Fitness value: 672.283142
Candidate 5:  0010110001	Fitness value: 672.283142
Candidate 6:  0110000010	Fitness value: 672.283142
Candidate 7:  1100000001	Fitness value: 672.283142
Candidate 8:  0100100001	Fitness value: 672.283142
Candidate 9:  0100001101	Fitness value: 672.283142
Candidate 10:  0100001000	Fitness value: 672.283142
************************************************

Entering crossover function

Crossover point is 1

Entering feasibility
1, orig: 13, term: 14
 0, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 1, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 2

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 1, orig: 19, term: 22
 0, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 45.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 3

Entering feasibility
0, orig: 13, term: 14
 0, orig: 14, term: 13
 1, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 1, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 20.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 4

Entering feasibility
1, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 1, orig: 22, term: 19
 0, orig: 19, term: 22
 0, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 1, orig: 16, term: 7
 
Budget = 50.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 5

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 6

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 7

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 0, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 25.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 8

Entering feasibility
0, orig: 13, term: 14
 1, orig: 14, term: 13
 0, orig: 11, term: 15
 0, orig: 15, term: 11
 0, orig: 22, term: 19
 0, orig: 19, term: 22
 1, orig: 9, term: 11
 1, orig: 11, term: 9
 0, orig: 7, term: 16
 0, orig: 16, term: 7
 
Budget = 35.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Exiting crossover function


************************************************
Children generated after crossover for Generation 5
************************************************
Candidate 1: 1010011000
Candidate 2: 0100110100
Candidate 3: 0010000010
Candidate 4: 1100100001
Candidate 5: 0100001100
************************************************

Entering mutation routine

Exiting mutation routine


************************************************
Children generated after mutation for Generation 5
************************************************
Candidate 1: 1010011000
Candidate 2: 0100110100
Candidate 3: 0010000010
Candidate 4: 1100100001
Candidate 5: 0100001100
************************************************
Iteration(Generation): 5, Child no: 1

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13745 rows        39527 cols       117459 elements
Crash basis containing 13 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         45.006400      D   1059     0        .000000     0
  9709       3774835.963      D    506     0        .000000     2
 13173       4200393.321      D    485     0        .000000     3
 14886       4242799.467      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  14886 simplex iterations in 4s

Final objective                         : 4.242799467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242799.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 5 results:
************************************************
Candidate: 1010011000
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 5, Child no: 2

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13745 rows        39528 cols       117462 elements
Crash basis containing 11 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         45.006400      D   1055     0        .000000     0
  9371       3987317.826      D    417     0        .000000     2
 13103       4241861.831      D    142     0        .000000     3
 13301       4242799.467      P      0     0        .000000     3
Uncrunching matrix
Optimal solution found
Dual solved problem
  13301 simplex iterations in 3s

Final objective                         : 4.242799467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 3.553e-15 / 3.553e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242799.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 5 results:
************************************************
Candidate: 0100110100
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 5, Child no: 3

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15298 (      0 spare) rows
       42744 (      0 spare) structural columns
      130828 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15298 rows        42744 cols       130828 elements
Presolved problem has:
     13721 rows        38536 cols       114512 elements
Crash basis containing 13 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         20.003200      D   1059     0        .000000     0
  9709       3698513.180      D    576     0        .000000     2
 13490       4156189.749      D    351     0        .000000     3
 15557       4242774.464      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  15557 simplex iterations in 4s

Final objective                         : 4.242774463871907e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 5.329e-15 / 5.329e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242774.463872

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 5 results:
************************************************
Candidate: 0010000010
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 5, Child no: 4

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15338 (      0 spare) rows
       43840 (      0 spare) structural columns
      133018 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15338 rows        43840 cols       133018 elements
Presolved problem has:
     13869 rows        39725 cols       117931 elements
Crash basis containing 9 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         50.006400      D   1057     0        .000000     0
  9616       3994960.249      D    394     0        .000000     2
 13004       4239483.924      D    220     0        .000000     3
 13447       4242804.467      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13447 simplex iterations in 4s

Final objective                         : 4.242804467071908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 5.329e-15 / 5.329e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242804.467072

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 5 results:
************************************************
Candidate: 1100100001
************************************************
Fitness: 672.283142
************************************************
Iteration(Generation): 5, Child no: 5

Points and slopes initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective
1 2	1 3	2 1	2 6	3 1	3 4	3 12	4 3	4 5	4 11	5 4	5 6	5 9	6 2	6 5	6 8	7 8	7 18	8 6	8 7	8 9	8 16	9 5	9 8	9 10	10 9	10 11	10 15	10 16	10 17	11 4	11 10	11 12	11 14	12 3	12 11	12 13	13 12	13 24	14 11	14 15	14 23	15 10	15 14	15 19	15 22	16 8	16 10	16 17	16 18	17 10	17 16	17 19	18 7	18 16	18 20	19 15	19 17	19 20	20 18	20 19	20 21	20 22	21 20	21 22	21 24	22 15	22 20	22 21	22 23	23 14	23 22	23 24	24 13	24 21	24 23	
Reading Problem TAP
Problem Statistics
       15318 (      0 spare) rows
       43292 (      0 spare) structural columns
      131923 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
     15318 rows        43292 cols       131923 elements
Presolved problem has:
     13733 rows        39031 cols       115984 elements
Crash basis containing 11 structural columns created
Starting parallel dual simplex, using up to 8 threads

   Its         Obj Value      S   Ninf  Nneg   Sum Dual Inf  Time
     0         35.004800      D   1055     0        .000000     0
  9193       3893221.525      D    524     0        .000000     2
 12637       4231168.518      D    450     0        .000000     3
 13401       4242789.465      P      0     0        .000000     4
Uncrunching matrix
Optimal solution found
Dual solved problem
  13401 simplex iterations in 4s

Final objective                         : 4.242789465471908e+06
  Max primal violation      (abs / rel) :       0.0 /       0.0
  Max dual violation        (abs / rel) : 7.105e-15 / 7.105e-15
  Max complementarity viol. (abs / rel) :       0.0 /       0.0
All values within tolerances

Objective value: 4242789.465472

Entering candidate fitness function

Candidate fitness: 672.283142

Exiting candidate fitness function


************************************************
Iteration 5 results:
************************************************
Candidate: 0100001100
************************************************
Fitness: 672.283142
************************************************


************************************************
Children sorted after crossover and mutation for Generation 5
************************************************
Candidate 1:  1010011000	Fitness value: 672.283142
Candidate 2:  0100110100	Fitness value: 672.283142
Candidate 3:  0010000010	Fitness value: 672.283142
Candidate 4:  1100100001	Fitness value: 672.283142
Candidate 5:  0100001100	Fitness value: 672.283142
************************************************

Status:  l = 10, k = 0, j = 10, pool_size = 5


Finished creating the next generation

Freed ga population

Genetic algorithm: Iteration 6


************************************************
Generation 6
************************************************
Candidate 1: 1000101010
Candidate 2: 0010011000
Candidate 3: 0110001100
Candidate 4: 1000110100
Candidate 5: 0010110001
Candidate 6: 0110000010
Candidate 7: 1100000001
Candidate 8: 0100100001
Candidate 9: 0100001101
Candidate 10: 0100001000
************************************************

Iteration 6: Candidate 1

Entering cache lookup

Pattern:
************************************************
Candidate: 1000101010
************************************************

Match:
************************************************
Candidate: 1000101010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1000101010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 2

Entering cache lookup

Pattern:
************************************************
Candidate: 0010011000
************************************************

Match:
************************************************
Candidate: 0010011000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0010011000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 3

Entering cache lookup

Pattern:
************************************************
Candidate: 0110001100
************************************************

Match:
************************************************
Candidate: 0110001100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0110001100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 4

Entering cache lookup

Pattern:
************************************************
Candidate: 1000110100
************************************************

Match:
************************************************
Candidate: 1000110100
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1000110100
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 5

Entering cache lookup

Pattern:
************************************************
Candidate: 0010110001
************************************************

Match:
************************************************
Candidate: 0010110001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0010110001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 6

Entering cache lookup

Pattern:
************************************************
Candidate: 0110000010
************************************************

Match:
************************************************
Candidate: 0110000010
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0110000010
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 7

Entering cache lookup

Pattern:
************************************************
Candidate: 1100000001
************************************************

Match:
************************************************
Candidate: 1100000001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 1100000001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 8

Entering cache lookup

Pattern:
************************************************
Candidate: 0100100001
************************************************

Match:
************************************************
Candidate: 0100100001
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100100001
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 9

Entering cache lookup

Pattern:
************************************************
Candidate: 0100001101
************************************************

Match:
************************************************
Candidate: 0100001101
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100001101
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before

Iteration 6: Candidate 10

Entering cache lookup

Pattern:
************************************************
Candidate: 0100001000
************************************************

Match:
************************************************
Candidate: 0100001000
************************************************

Cache hit. No need to re compute for this candidate again
************************************************
Candidate: 0100001000
************************************************

Cache hit. Do not need to solve the TAP for this candidate. Setting the fitness as computed before


************************************************
Generation 6(Before sorting)
************************************************
Candidate 1:  1000101010	Fitness value: 672.283142
Candidate 2:  0010011000	Fitness value: 672.283142
Candidate 3:  0110001100	Fitness value: 672.283142
Candidate 4:  1000110100	Fitness value: 672.283142
Candidate 5:  0010110001	Fitness value: 672.283142
Candidate 6:  0110000010	Fitness value: 672.283142
Candidate 7:  1100000001	Fitness value: 672.283142
Candidate 8:  0100100001	Fitness value: 672.283142
Candidate 9:  0100001101	Fitness value: 672.283142
Candidate 10:  0100001000	Fitness value: 672.283142
************************************************

Genetic algorithm terminates because the objective function value has remained the same for a long time

Final objective value for DNDP is 672.283142
