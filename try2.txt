Enter main

WARNING:  Please remember to change the settings for low budget problems to avoid getting stuck in an infinite loop. For low budget problems check_duplicate function is not a good idea as there are few feasible candidates in problems for low budget and one cannot avoid duplicates


Entering init_net_data function

Exiting init_net_data function

Inside parse function

Reading from data file started

1 2 20

1 5 18

2 3 23

2 6 19

3 4 17

3 7 16

5 6 14

5 9 24

6 10 20

6 7 17

7 11 26

7 8 13

8 12 19

11 12 17

4 8 22

9 10 7

10 11 18

Partial parsing finished

1 6 19.000000 7.000000

5 10 25.000000 12.000000

2 7 30.000000 7.000000

6 11 32.000000 15.000000

3 8 21.000000 11.000000

7 12 28.000000 18.000000

Printing network data

[1,1]:0.00 0.00	[1,2]:0.00 20.00	[1,3]:0.00 0.00	[1,4]:0.00 0.00	[1,5]:0.00 18.00	[1,6]:0.00 19.00	[1,7]:0.00 0.00	[1,8]:0.00 0.00	[1,9]:0.00 0.00	[1,10]:0.00 0.00	[1,11]:0.00 0.00	[1,12]:20.00 0.00	
[2,1]:0.00 0.00	[2,2]:0.00 0.00	[2,3]:0.00 23.00	[2,4]:0.00 0.00	[2,5]:0.00 0.00	[2,6]:0.00 19.00	[2,7]:0.00 30.00	[2,8]:0.00 0.00	[2,9]:0.00 0.00	[2,10]:0.00 0.00	[2,11]:0.00 0.00	[2,12]:0.00 0.00	
[3,1]:0.00 0.00	[3,2]:0.00 0.00	[3,3]:0.00 0.00	[3,4]:0.00 17.00	[3,5]:0.00 0.00	[3,6]:0.00 0.00	[3,7]:0.00 16.00	[3,8]:0.00 21.00	[3,9]:0.00 0.00	[3,10]:0.00 0.00	[3,11]:0.00 0.00	[3,12]:0.00 0.00	
[4,1]:0.00 0.00	[4,2]:0.00 0.00	[4,3]:0.00 0.00	[4,4]:0.00 0.00	[4,5]:0.00 0.00	[4,6]:0.00 0.00	[4,7]:0.00 0.00	[4,8]:0.00 22.00	[4,9]:0.00 0.00	[4,10]:0.00 0.00	[4,11]:0.00 0.00	[4,12]:0.00 0.00	
[5,1]:0.00 0.00	[5,2]:0.00 0.00	[5,3]:0.00 0.00	[5,4]:0.00 0.00	[5,5]:0.00 0.00	[5,6]:0.00 14.00	[5,7]:0.00 0.00	[5,8]:0.00 0.00	[5,9]:0.00 24.00	[5,10]:0.00 25.00	[5,11]:0.00 0.00	[5,12]:0.00 0.00	
[6,1]:0.00 0.00	[6,2]:0.00 0.00	[6,3]:0.00 0.00	[6,4]:0.00 0.00	[6,5]:0.00 0.00	[6,6]:0.00 0.00	[6,7]:0.00 17.00	[6,8]:0.00 0.00	[6,9]:0.00 0.00	[6,10]:0.00 20.00	[6,11]:0.00 32.00	[6,12]:0.00 0.00	
[7,1]:0.00 0.00	[7,2]:0.00 0.00	[7,3]:0.00 0.00	[7,4]:0.00 0.00	[7,5]:0.00 0.00	[7,6]:0.00 0.00	[7,7]:0.00 0.00	[7,8]:0.00 13.00	[7,9]:0.00 0.00	[7,10]:0.00 0.00	[7,11]:0.00 26.00	[7,12]:0.00 28.00	
[8,1]:0.00 0.00	[8,2]:0.00 0.00	[8,3]:0.00 0.00	[8,4]:0.00 0.00	[8,5]:0.00 0.00	[8,6]:0.00 0.00	[8,7]:0.00 0.00	[8,8]:0.00 0.00	[8,9]:0.00 0.00	[8,10]:0.00 0.00	[8,11]:0.00 0.00	[8,12]:0.00 19.00	
[9,1]:0.00 0.00	[9,2]:0.00 0.00	[9,3]:0.00 0.00	[9,4]:0.00 0.00	[9,5]:0.00 0.00	[9,6]:0.00 0.00	[9,7]:0.00 0.00	[9,8]:0.00 0.00	[9,9]:0.00 0.00	[9,10]:0.00 7.00	[9,11]:0.00 0.00	[9,12]:0.00 0.00	
[10,1]:0.00 0.00	[10,2]:0.00 0.00	[10,3]:0.00 0.00	[10,4]:0.00 0.00	[10,5]:0.00 0.00	[10,6]:0.00 0.00	[10,7]:0.00 0.00	[10,8]:0.00 0.00	[10,9]:0.00 0.00	[10,10]:0.00 0.00	[10,11]:0.00 18.00	[10,12]:0.00 0.00	
[11,1]:0.00 0.00	[11,2]:0.00 0.00	[11,3]:0.00 0.00	[11,4]:0.00 0.00	[11,5]:0.00 0.00	[11,6]:0.00 0.00	[11,7]:0.00 0.00	[11,8]:0.00 0.00	[11,9]:0.00 0.00	[11,10]:0.00 0.00	[11,11]:0.00 0.00	[11,12]:0.00 17.00	
[12,1]:0.00 0.00	[12,2]:0.00 0.00	[12,3]:0.00 0.00	[12,4]:0.00 0.00	[12,5]:0.00 0.00	[12,6]:0.00 0.00	[12,7]:0.00 0.00	[12,8]:0.00 0.00	[12,9]:0.00 0.00	[12,10]:0.00 0.00	[12,11]:0.00 0.00	[12,12]:0.00 0.00	
Exiting parse function

Entering generate_rand

Entering encode_ga_cand
0 1 0 0 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 30.000000

Exiting feasiblity

Entering encode_ga_cand
0 0 0 1 0 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 15.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 0 0 0 0 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 18.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 1 1 1 1 1 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 70.000000

Not feasible

Entering encode_ga_cand
0 1 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 1 0 1 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 1 1 1 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
1 1 1 0 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 1 1 1 1 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 63.000000

Not feasible

Entering encode_ga_cand
1 0 0 1 0 0 
Existing encode_ga_cand

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 22.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 1 1 0 1 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 48.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering encode_ga_cand
0 1 1 1 1 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 63.000000

Not feasible

Entering encode_ga_cand
0 1 0 0 1 1 
Existing encode_ga_cand

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 0, orig: 6, term: 11
 1, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Exiting generate_rand

Genetic algorithm: Iteration 1


************************************************
Generation 1
************************************************
Candidate 1: 010001
Candidate 2: 000100
Candidate 3: 000001
Candidate 4: 011000
Candidate 5: 110100
Candidate 6: 111100
Candidate 7: 111000
Candidate 8: 100100
Candidate 9: 011011
Candidate 10: 010011
************************************************

Iteration 1: Candidate 1

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective

1 2	1 5	
2 3	2 6	
3 4	3 7	
4 8	
5 6	5 9	
6 7	6 10	
7 8	7 11	
8 12	
9 10	
10 11	
11 12	


Reading Problem TAP
Problem Statistics
         192 (      0 spare) rows
         184 (      0 spare) structural columns
         368 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
       192 rows          184 cols          368 elements


The problem is infeasible due to row Flow conservation_8

Travelers on link a
[1, 0] = 0.000000
[1, 0] = 0.000000
[2, 0] = 0.000000
[2, 0] = 0.000000
[3, 0] = 0.000000
[3, 0] = 0.000000
[5, 0] = 0.000000
[5, 0] = 0.000000
[6, 0] = 0.000000
[6, 0] = 0.000000
[7, 0] = 0.000000
[7, 0] = 0.000000
[8, 0] = 0.000000
[11, 0] = 0.000000
[4, 0] = 0.000000
[9, 0] = 0.000000
[10, 0] = 0.000000
[5, 10] = 0.000000
[7, 12] = 0.000000

Objective value: 0.000000

Entering candidate fitness function

Candidate fitness: 0.000000e+00

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 010001
************************************************
Fitness: 0.000000
************************************************

Iteration 1: Candidate 2

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective

1 2	1 5	
2 3	2 6	
3 4	3 7	
4 8	
5 6	5 9	
6 7	6 10	
7 8	7 11	
8 12	
9 10	
10 11	
11 12	


Reading Problem TAP
Problem Statistics
         112 (      0 spare) rows
         103 (      0 spare) structural columns
         207 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
       112 rows          103 cols          207 elements


The problem is infeasible due to row Flow conservation_9

Travelers on link a
[1, 0] = 0.000000
[1, 0] = 0.000000
[2, 0] = 0.000000
[2, 0] = 0.000000
[3, 0] = 0.000000
[3, 0] = 0.000000
[5, 0] = 0.000000
[5, 0] = 0.000000
[6, 0] = 0.000000
[6, 0] = 0.000000
[7, 0] = 0.000000
[7, 0] = 0.000000
[8, 0] = 0.000000
[11, 0] = 0.000000
[4, 0] = 0.000000
[9, 0] = 0.000000
[10, 0] = 0.000000
[6, 11] = 0.000000

Objective value: 0.000000

Entering candidate fitness function

Candidate fitness: 0.000000e+00

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 000100
************************************************
Fitness: 0.000000
************************************************

Iteration 1: Candidate 3

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective

1 2	1 5	
2 3	2 6	
3 4	3 7	
4 8	
5 6	5 9	
6 7	6 10	
7 8	7 11	
8 12	
9 10	
10 11	
11 12	


Reading Problem TAP
Problem Statistics
         112 (      0 spare) rows
         103 (      0 spare) structural columns
         207 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
       112 rows          103 cols          207 elements


The problem is infeasible due to row Flow conservation_9

Travelers on link a
[1, 0] = 0.000000
[1, 0] = 0.000000
[2, 0] = 0.000000
[2, 0] = 0.000000
[3, 0] = 0.000000
[3, 0] = 0.000000
[5, 0] = 0.000000
[5, 0] = 0.000000
[6, 0] = 0.000000
[6, 0] = 0.000000
[7, 0] = 0.000000
[7, 0] = 0.000000
[8, 0] = 0.000000
[11, 0] = 0.000000
[4, 0] = 0.000000
[9, 0] = 0.000000
[10, 0] = 0.000000
[7, 12] = 0.000000

Objective value: 0.000000

Entering candidate fitness function

Candidate fitness: 0.000000e+00

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 000001
************************************************
Fitness: 0.000000
************************************************

Iteration 1: Candidate 4

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective

1 2	1 5	
2 3	2 6	
3 4	3 7	
4 8	
5 6	5 9	
6 7	6 10	
7 8	7 11	
8 12	
9 10	
10 11	
11 12	


Reading Problem TAP
Problem Statistics
         192 (      0 spare) rows
         184 (      0 spare) structural columns
         368 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
       192 rows          184 cols          368 elements


The problem is infeasible due to row Flow conservation_8

Travelers on link a
[1, 0] = 0.000000
[1, 0] = 0.000000
[2, 0] = 0.000000
[2, 0] = 0.000000
[3, 0] = 0.000000
[3, 0] = 0.000000
[5, 0] = 0.000000
[5, 0] = 0.000000
[6, 0] = 0.000000
[6, 0] = 0.000000
[7, 0] = 0.000000
[7, 0] = 0.000000
[8, 0] = 0.000000
[11, 0] = 0.000000
[4, 0] = 0.000000
[9, 0] = 0.000000
[10, 0] = 0.000000
[5, 10] = 0.000000
[2, 7] = 0.000000

Objective value: 0.000000

Entering candidate fitness function

Candidate fitness: 0.000000e+00

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 011000
************************************************
Fitness: 0.000000
************************************************

Iteration 1: Candidate 5

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective

1 2	1 5	
2 3	2 6	
3 4	3 7	
4 8	
5 6	5 9	
6 7	6 10	
7 8	7 11	
8 12	
9 10	
10 11	
11 12	


Reading Problem TAP
Problem Statistics
         272 (      0 spare) rows
         265 (      0 spare) structural columns
         529 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
       272 rows          265 cols          529 elements


The problem is infeasible due to row Flow conservation_9

Travelers on link a
[1, 0] = 0.000000
[1, 0] = 0.000000
[2, 0] = 0.000000
[2, 0] = 0.000000
[3, 0] = 0.000000
[3, 0] = 0.000000
[5, 0] = 0.000000
[5, 0] = 0.000000
[6, 0] = 0.000000
[6, 0] = 0.000000
[7, 0] = 0.000000
[7, 0] = 0.000000
[8, 0] = 0.000000
[11, 0] = 0.000000
[4, 0] = 0.000000
[9, 0] = 0.000000
[10, 0] = 0.000000
[1, 6] = 0.000000
[5, 10] = 0.000000
[6, 11] = 0.000000

Objective value: 0.000000

Entering candidate fitness function

Candidate fitness: 0.000000e+00

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 110100
************************************************
Fitness: 0.000000
************************************************

Iteration 1: Candidate 6

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective

1 2	1 5	
2 3	2 6	
3 4	3 7	
4 8	
5 6	5 9	
6 7	6 10	
7 8	7 11	
8 12	
9 10	
10 11	
11 12	


Reading Problem TAP
Problem Statistics
         353 (      0 spare) rows
         346 (      0 spare) structural columns
         690 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
       353 rows          346 cols          690 elements


The problem is infeasible due to row Flow conservation_9

Travelers on link a
[1, 0] = 0.000000
[1, 0] = 0.000000
[2, 0] = 0.000000
[2, 0] = 0.000000
[3, 0] = 0.000000
[3, 0] = 0.000000
[5, 0] = 0.000000
[5, 0] = 0.000000
[6, 0] = 0.000000
[6, 0] = 0.000000
[7, 0] = 0.000000
[7, 0] = 0.000000
[8, 0] = 0.000000
[11, 0] = 0.000000
[4, 0] = 0.000000
[9, 0] = 0.000000
[10, 0] = 0.000000
[1, 6] = 0.000000
[5, 10] = 0.000000
[2, 7] = 0.000000
[6, 11] = 0.000000

Objective value: 0.000000

Entering candidate fitness function

Candidate fitness: 0.000000e+00

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 111100
************************************************
Fitness: 0.000000
************************************************

Iteration 1: Candidate 7

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective

1 2	1 5	
2 3	2 6	
3 4	3 7	
4 8	
5 6	5 9	
6 7	6 10	
7 8	7 11	
8 12	
9 10	
10 11	
11 12	


Reading Problem TAP
Problem Statistics
         273 (      0 spare) rows
         265 (      0 spare) structural columns
         529 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
       273 rows          265 cols          529 elements


The problem is infeasible due to row Flow conservation_8

Travelers on link a
[1, 0] = 0.000000
[1, 0] = 0.000000
[2, 0] = 0.000000
[2, 0] = 0.000000
[3, 0] = 0.000000
[3, 0] = 0.000000
[5, 0] = 0.000000
[5, 0] = 0.000000
[6, 0] = 0.000000
[6, 0] = 0.000000
[7, 0] = 0.000000
[7, 0] = 0.000000
[8, 0] = 0.000000
[11, 0] = 0.000000
[4, 0] = 0.000000
[9, 0] = 0.000000
[10, 0] = 0.000000
[1, 6] = 0.000000
[5, 10] = 0.000000
[2, 7] = 0.000000

Objective value: 0.000000

Entering candidate fitness function

Candidate fitness: 0.000000e+00

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 111000
************************************************
Fitness: 0.000000
************************************************

Iteration 1: Candidate 8

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective

1 2	1 5	
2 3	2 6	
3 4	3 7	
4 8	
5 6	5 9	
6 7	6 10	
7 8	7 11	
8 12	
9 10	
10 11	
11 12	


Reading Problem TAP
Problem Statistics
         192 (      0 spare) rows
         184 (      0 spare) structural columns
         368 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
       192 rows          184 cols          368 elements


The problem is infeasible due to row Flow conservation_9

Travelers on link a
[1, 0] = 0.000000
[1, 0] = 0.000000
[2, 0] = 0.000000
[2, 0] = 0.000000
[3, 0] = 0.000000
[3, 0] = 0.000000
[5, 0] = 0.000000
[5, 0] = 0.000000
[6, 0] = 0.000000
[6, 0] = 0.000000
[7, 0] = 0.000000
[7, 0] = 0.000000
[8, 0] = 0.000000
[11, 0] = 0.000000
[4, 0] = 0.000000
[9, 0] = 0.000000
[10, 0] = 0.000000
[1, 6] = 0.000000
[6, 11] = 0.000000

Objective value: 0.000000

Entering candidate fitness function

Candidate fitness: 0.000000e+00

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 100100
************************************************
Fitness: 0.000000
************************************************

Iteration 1: Candidate 9

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective

1 2	1 5	
2 3	2 6	
3 4	3 7	
4 8	
5 6	5 9	
6 7	6 10	
7 8	7 11	
8 12	
9 10	
10 11	
11 12	


Reading Problem TAP
Problem Statistics
         352 (      0 spare) rows
         346 (      0 spare) structural columns
         690 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
       352 rows          346 cols          690 elements


The problem is infeasible due to row Flow conservation_8

Travelers on link a
[1, 0] = 0.000000
[1, 0] = 0.000000
[2, 0] = 0.000000
[2, 0] = 0.000000
[3, 0] = 0.000000
[3, 0] = 0.000000
[5, 0] = 0.000000
[5, 0] = 0.000000
[6, 0] = 0.000000
[6, 0] = 0.000000
[7, 0] = 0.000000
[7, 0] = 0.000000
[8, 0] = 0.000000
[11, 0] = 0.000000
[4, 0] = 0.000000
[9, 0] = 0.000000
[10, 0] = 0.000000
[5, 10] = 0.000000
[2, 7] = 0.000000
[3, 8] = 0.000000
[7, 12] = 0.000000

Objective value: 0.000000

Entering candidate fitness function

Candidate fitness: 0.000000e+00

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 011011
************************************************
Fitness: 0.000000
************************************************

Iteration 1: Candidate 10

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective

1 2	1 5	
2 3	2 6	
3 4	3 7	
4 8	
5 6	5 9	
6 7	6 10	
7 8	7 11	
8 12	
9 10	
10 11	
11 12	


Reading Problem TAP
Problem Statistics
         272 (      0 spare) rows
         265 (      0 spare) structural columns
         529 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
       272 rows          265 cols          529 elements


The problem is infeasible due to row Flow conservation_8

Travelers on link a
[1, 0] = 0.000000
[1, 0] = 0.000000
[2, 0] = 0.000000
[2, 0] = 0.000000
[3, 0] = 0.000000
[3, 0] = 0.000000
[5, 0] = 0.000000
[5, 0] = 0.000000
[6, 0] = 0.000000
[6, 0] = 0.000000
[7, 0] = 0.000000
[7, 0] = 0.000000
[8, 0] = 0.000000
[11, 0] = 0.000000
[4, 0] = 0.000000
[9, 0] = 0.000000
[10, 0] = 0.000000
[5, 10] = 0.000000
[3, 8] = 0.000000
[7, 12] = 0.000000

Objective value: 0.000000

Entering candidate fitness function

Candidate fitness: 0.000000e+00

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 010011
************************************************
Fitness: 0.000000
************************************************


************************************************
Generation 1(Before sorting)
************************************************
Candidate 1:  010001	Fitness value: 0.000000e+00
Candidate 2:  000100	Fitness value: 0.000000e+00
Candidate 3:  000001	Fitness value: 0.000000e+00
Candidate 4:  011000	Fitness value: 0.000000e+00
Candidate 5:  110100	Fitness value: 0.000000e+00
Candidate 6:  111100	Fitness value: 0.000000e+00
Candidate 7:  111000	Fitness value: 0.000000e+00
Candidate 8:  100100	Fitness value: 0.000000e+00
Candidate 9:  011011	Fitness value: 0.000000e+00
Candidate 10:  010011	Fitness value: 0.000000e+00
************************************************


************************************************
Generation 1(After sorting)
************************************************
Candidate 1:  010001	Fitness value: 0.000000e+00
Candidate 2:  000100	Fitness value: 0.000000e+00
Candidate 3:  000001	Fitness value: 0.000000e+00
Candidate 4:  011000	Fitness value: 0.000000e+00
Candidate 5:  110100	Fitness value: 0.000000e+00
Candidate 6:  111100	Fitness value: 0.000000e+00
Candidate 7:  111000	Fitness value: 0.000000e+00
Candidate 8:  100100	Fitness value: 0.000000e+00
Candidate 9:  011011	Fitness value: 0.000000e+00
Candidate 10:  010011	Fitness value: 0.000000e+00
************************************************

Entering crossover function

Crossover point is 1

Entering feasibility
0, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 15.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 27.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Crossover point is 4

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 19.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
0, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 27.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Duplicate found

This child generated from a crossover operation is already present in this population of children. We do not consider it                  and continue with no more attempts

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 1

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 22.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 2

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 34.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 3

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 41.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

This crossover operation has generated a child that is a duplicate of one of the candidates in the parent population. hence                  we need to repeat this crossover operation for this pair of candidates with a different crossover point.

Crossover point is 4

Entering feasibility
1, orig: 1, term: 6
 1, orig: 5, term: 10
 1, orig: 2, term: 7
 0, orig: 6, term: 11
 0, orig: 3, term: 8
 0, orig: 7, term: 12
 
Budget = 26.000000

Exiting feasiblity

Entering check_duplicate function

Duplicate found

Entering check_duplicate function

Exiting check_duplicate function

Already tried enough attempts at generating a unique child from crossover so we will not consider the crossover for this                     pair and continue with the next consecutive pair

Crossover point is 5

Entering feasibility
1, orig: 1, term: 6
 0, orig: 5, term: 10
 0, orig: 2, term: 7
 1, orig: 6, term: 11
 0, orig: 3, term: 8
 1, orig: 7, term: 12
 
Budget = 40.000000

Exiting feasiblity

Entering check_duplicate function

Exiting check_duplicate function

Entering check_duplicate function

Exiting check_duplicate function

Exiting crossover function


************************************************
Children generated after crossover for Generation 1
************************************************
Candidate 1: 010100
Candidate 2: 100101
************************************************

Entering mutation routine

Exiting mutation routine


************************************************
Children generated after mutation for Generation 1
************************************************
Candidate 1: 010100
Candidate 2: 100101
************************************************
Iteration(Generation): 1, Child no: 1

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective

1 2	1 5	
2 3	2 6	
3 4	3 7	
4 8	
5 6	5 9	
6 7	6 10	
7 8	7 11	
8 12	
9 10	
10 11	
11 12	


Reading Problem TAP
Problem Statistics
         192 (      0 spare) rows
         184 (      0 spare) structural columns
         368 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
       192 rows          184 cols          368 elements


The problem is infeasible due to row Flow conservation_9

Objective value: 0.000000

Entering candidate fitness function

Candidate fitness: 0.000000e+00

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 010100
************************************************
Fitness: 0.000000
************************************************
Iteration(Generation): 1, Child no: 2

Points and slopes initialized

Demand variables initialized

Decision variables declared

Flow aggregation constraints declared

Demand at origin constraints declared

Demand at destination constraints declared

Budget constraints declared

Before objective

1 2	1 5	
2 3	2 6	
3 4	3 7	
4 8	
5 6	5 9	
6 7	6 10	
7 8	7 11	
8 12	
9 10	
10 11	
11 12	


Reading Problem TAP
Problem Statistics
         273 (      0 spare) rows
         265 (      0 spare) structural columns
         529 (      0 spare) non-zero elements
Global Statistics
           0 entities        0 sets        0 set members
Minimizing LP TAP
Original problem has:
       273 rows          265 cols          529 elements


The problem is infeasible due to row Flow conservation_9

Objective value: 0.000000

Entering candidate fitness function

Candidate fitness: 0.000000e+00

Exiting candidate fitness function


************************************************
Iteration 1 results:
************************************************
Candidate: 100101
************************************************
Fitness: 0.000000
************************************************


************************************************
Children sorted after crossover and mutation for Generation 1
************************************************
Candidate 1:  010100	Fitness value: 0.000000e+00
Candidate 2:  100101	Fitness value: 0.000000e+00
************************************************

Status:  l = 10, k = 0, j = 10, pool_size = 2


Finished creating the next generation

Freed ga population

Final objective value for DNDP is 0.000000

Entering cleanup_net_data function

Exiting cleanup_net_data function
