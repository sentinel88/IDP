/********************************************************
  Xpress-BCL C++ Example Problems
  ===============================

  file xbchess.cxx
  ````````````````
  Small LP-problem.

  (c) 2008 Fair Isaac Corporation
      author: S.Heipcke, Jan. 2000, rev. Mar. 2011
********************************************************/

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "xprb_cpp.h"

#define M 40

using namespace std;
using namespace ::dashoptimization;

/***********************************************************************/

int main(int argc, char **argv)
{
 XPRBvar x[M];               /* Decision variables */
 // XPRBvar xl;               /* Number of large chess sets to make */
 XPRBprob p("Piecewise Approximation");      /* Initialize a new problem in BCL */
 XPRBexpr incr;              /* Increment to be added after x[1] */
 float points[M+1], slopes[M+1];        /* Approximation points,  Function to approximate is (x^5) */
 int i,j;                  /* Iteration variables */

/****Approximation Points and associated slopes******/
 points[0] = 0; slopes[0] = 0;
 for (i=1; i<=M; i++) { 
    points[i] = points[i-1] + 0.2;
    slopes[i] = ( pow(points[i], 5) - pow(points[i-1], 5)) / (points[i] - points[i-1]);
 }

/****VARIABLES****/
 for (i=0; i<=M; i++) {
    x[i] = p.newVar("x");
 }
 
 x[0].fix(0.0);      /* Default unused value */ 
 x[1].fix(5.5);      /* Function value to be approximated at this given point */

 incr = 0;

 for (i=2; i<=M; i++) {
    incr += (slopes[i] - slopes[i-1]) * x[i];
 }
/****OBJECTIVE****/
 p.setObj(p.newCtr("OBJ", 0 + slopes[1]*x[1] + incr)); /* Define & set the obj. function */ 

/****CONSTRAINTS****/
                           /* Define the constraint x[1] <= x[i] + points[i-1] where i = 2..M */
 for (i=2; i<=M; i++) { 
    p.newCtr("Incr", x[1] <= x[i] + points[i-1]);
 }

/****SOLVING****/
 p.setSense(XPRB_MINIM);
 p.lpOptimize("");         /* Solve the LP-problem */

 cout<<"\nObjective value: "<<p.getObjVal()<<"\n";
 cout<<"Decision variable values\n";

 for (i=2; i<=M; i++) {
    cout<<"x["<<i<<"] = "<<x[i].getSol()<<"\t";
 }

 cout<<"\n\n";

 return 0;  
}
